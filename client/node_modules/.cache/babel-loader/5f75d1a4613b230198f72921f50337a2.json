{"ast":null,"code":"var _jsxFileName = \"/Users/roger/Projects/mechanic-frontend/client/src/components/Posts.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { axiosWithAuth } from '../helpers/index';\nimport IndividualPost from './IndividualPost';\nimport { connect } from 'react-redux';\nimport { fetchFilteredPosts } from \"../store/actions/postActions\";\nimport { toggleSearchToTrue } from \"../store/actions/postActions\";\nimport { updatePageNumber } from '../store/actions/postActions'; // import { changeOrderPosts } from \"../store/actions/postActions\";\n// import { fetchPosts } from \"../store/actions/postActions\";\n\nimport Pagination from './Pagination';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Search from \"./Search\";\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/Select';\nimport OrderPosts from './OrderPosts';\nimport axios from 'axios';\n\nfunction Posts(props) {\n  const [searchPosts, setsearchPosts] = useState([]);\n  const [initalLoadPosts, setInitialLoadPosts] = useState([]);\n  const [numPages, setNumPages] = useState(); //  const [orderBy,setOrderBy] = useState({\n  //    order:props.orderPosts\n  //   })\n\n  const [order, setOrder] = useState();\n\n  async function searchPostsHandler(term) {\n    axiosWithAuth().post('/post/search', {\n      searchTerm: term\n    }).then(res => {\n      setsearchPosts(res.data);\n      props.toggleSearchToTrue();\n    }).catch(err => {});\n  }\n\n  ;\n  useEffect(() => {\n    onFirstLoad(); // if(props.orderPosts !== order){\n    //   props.fetchFilteredPosts(\"AllPosts\",`${props.orderPosts}`,1)\n    // }else{\n\n    props.fetchFilteredPosts(`${props.currentTermForFilter}`, `${props.orderPosts}`, `${props.currentPage}`); // }\n    // setOrder(props.orderPosts)\n  }, [props.currentPage, props.currentTermForFilter]);\n\n  function onFirstLoad() {\n    axios.post(`${process.env.REACT_APP_API_URL}/post/filterCategory`, {\n      category: 'AllPosts',\n      order: 'date',\n      currentPage: props.currentPage\n    }).then(res => {\n      setInitialLoadPosts(res.data.data);\n      setNumPages(res.data.pagination.lastPage);\n    }).catch(err => {\n      console.log(err);\n    });\n  } // console.log(props.currentTermForFilter,\"currentTermForFilter\")\n  // console.log(props.orderPosts,\"orderPosts\")\n  // console.log(props.currentPage,\"currentPage\")\n\n\n  console.log(initalLoadPosts, \"initalLoadPosts\");\n\n  if (props.searchToggle === true) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Search, {\n      searchPostsHandler: searchPostsHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Pagination, {\n      numPages: numPages,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(OrderPosts, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }\n    }, searchPosts.map(p => {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(IndividualPost, {\n        post: p,\n        key: caches.uid,\n        fetchPosts: props.fetchFilteredPosts,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 19\n        }\n      }));\n    })));\n  } else if (props.filteredPosts.length < 1 && props.searchToggle === false) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Search, {\n      searchPostsHandler: searchPostsHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(Pagination, {\n      numPages: numPages,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(OrderPosts, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 7\n      }\n    }, initalLoadPosts.map(p => {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(IndividualPost, {\n        post: p,\n        key: caches.uid,\n        fetchPosts: props.fetchFilteredPosts,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 19\n        }\n      }));\n    })));\n  } else {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Search, {\n      searchPostsHandler: searchPostsHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Pagination, {\n      numPages: props.filteredPosts.pagination.lastPage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(OrderPosts, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }\n    }, props.filteredPosts.data.map(p => {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(IndividualPost, {\n        post: p,\n        numPages: props.filteredPosts.pagination.lastPage,\n        fetchPosts: props.fetchFilteredPosts,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 21\n        }\n      }));\n    })));\n  }\n}\n\n;\n\nconst mapStateToProps = state => ({\n  searchToggle: state.post.searchToggle,\n  myposts: state.post.posts,\n  filteredPosts: state.post.filteredPosts,\n  orderPosts: state.post.order,\n  currentPage: state.post.currentpage,\n  currentTermForFilter: state.post.currentTermForFilter\n});\n\nexport default connect(mapStateToProps, {\n  toggleSearchToTrue,\n  fetchFilteredPosts,\n  updatePageNumber\n})(Posts);","map":{"version":3,"sources":["/Users/roger/Projects/mechanic-frontend/client/src/components/Posts.js"],"names":["React","useState","useEffect","axiosWithAuth","IndividualPost","connect","fetchFilteredPosts","toggleSearchToTrue","updatePageNumber","Pagination","ExpandMoreIcon","Search","Select","InputLabel","OrderPosts","axios","Posts","props","searchPosts","setsearchPosts","initalLoadPosts","setInitialLoadPosts","numPages","setNumPages","order","setOrder","searchPostsHandler","term","post","searchTerm","then","res","data","catch","err","onFirstLoad","currentTermForFilter","orderPosts","currentPage","process","env","REACT_APP_API_URL","category","pagination","lastPage","console","log","searchToggle","display","flexDirection","alignItems","map","p","caches","uid","filteredPosts","length","mapStateToProps","state","myposts","posts","currentpage"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,kBAAT,QAAmC,8BAAnC;AACA,SAASC,kBAAT,QAAmC,8BAAnC;AACA,SAAQC,gBAAR,QAA+B,8BAA/B,C,CACA;AACA;;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,cAAP,MAA2B,+BAA3B;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAIA,SAASC,KAAT,CAAeC,KAAf,EAAsB;AAEpB,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgClB,QAAQ,CAAC,EAAD,CAA9C;AAEA,QAAM,CAACmB,eAAD,EAAkBC,mBAAlB,IAAyCpB,QAAQ,CAAC,EAAD,CAAvD;AAEA,QAAM,CAACqB,QAAD,EAAUC,WAAV,IAAyBtB,QAAQ,EAAvC,CANoB,CAQtB;AAEA;AAEA;;AAEA,QAAM,CAACuB,KAAD,EAAOC,QAAP,IAAmBxB,QAAQ,EAAjC;;AAEE,iBAAeyB,kBAAf,CAAkCC,IAAlC,EAAwC;AAEtCxB,IAAAA,aAAa,GACVyB,IADH,CACQ,cADR,EACwB;AAAEC,MAAAA,UAAU,EAAEF;AAAd,KADxB,EAEGG,IAFH,CAEQC,GAAG,IAAI;AACXZ,MAAAA,cAAc,CAACY,GAAG,CAACC,IAAL,CAAd;AACAf,MAAAA,KAAK,CAACV,kBAAN;AACD,KALH,EAMG0B,KANH,CAMSC,GAAG,IAAI,CACb,CAPH;AAQD;;AAAA;AAGAhC,EAAAA,SAAS,CAAC,MAAM;AACfiC,IAAAA,WAAW,GADI,CAIf;AACA;AAEA;;AAEElB,IAAAA,KAAK,CAACX,kBAAN,CAA0B,GAAEW,KAAK,CAACmB,oBAAqB,EAAvD,EAA0D,GAAEnB,KAAK,CAACoB,UAAW,EAA7E,EAAgF,GAAEpB,KAAK,CAACqB,WAAY,EAApG,EATa,CAWf;AACA;AAED,GAdS,EAcP,CAACrB,KAAK,CAACqB,WAAP,EAAmBrB,KAAK,CAACmB,oBAAzB,CAdO,CAAT;;AAqBD,WAASD,WAAT,GAAsB;AAEnBpB,IAAAA,KAAK,CACHa,IADF,CACQ,GAAEW,OAAO,CAACC,GAAR,CAAYC,iBAAkB,sBADxC,EAC+D;AAAEC,MAAAA,QAAQ,EAAE,UAAZ;AAAyBlB,MAAAA,KAAK,EAAE,MAAhC;AAAwCc,MAAAA,WAAW,EAACrB,KAAK,CAACqB;AAA1D,KAD/D,EAEER,IAFF,CAEOC,GAAG,IAAI;AACXV,MAAAA,mBAAmB,CAACU,GAAG,CAACC,IAAJ,CAASA,IAAV,CAAnB;AACAT,MAAAA,WAAW,CAACQ,GAAG,CAACC,IAAJ,CAASW,UAAT,CAAoBC,QAArB,CAAX;AAED,KANF,EAOEX,KAPF,CAOQC,GAAG,IAAI;AACZW,MAAAA,OAAO,CAACC,GAAR,CAAYZ,GAAZ;AACD,KATF;AAYF,GAhEmB,CAkEpB;AACA;AACA;;;AAEDW,EAAAA,OAAO,CAACC,GAAR,CAAY1B,eAAZ,EAA4B,iBAA5B;;AAQC,MAAIH,KAAK,CAAC8B,YAAN,KAAuB,IAA3B,EAAiC;AAE/B,wBAEE,uDAEE,oBAAC,MAAD;AAAQ,MAAA,kBAAkB,EAAErB,kBAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAIE,oBAAC,UAAD;AAAY,MAAA,QAAQ,EAAEJ,QAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,eAKE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,eAQE;AAAK,MAAA,KAAK,EAAE;AAAE0B,QAAAA,OAAO,EAAE,MAAX;AAAmBC,QAAAA,aAAa,EAAE,QAAlC;AAA4CC,QAAAA,UAAU,EAAE;AAAxD,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAIIhC,WAAW,CAACiC,GAAZ,CAAgBC,CAAC,IAAI;AACnB,0BACE,uDACE,oBAAC,cAAD;AAAgB,QAAA,IAAI,EAAEA,CAAtB;AAAyB,QAAA,GAAG,EAAEC,MAAM,CAACC,GAArC;AAA2C,QAAA,UAAU,EAAErC,KAAK,CAACX,kBAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AAKD,KAND,CAJJ,CARF,CAFF;AAgCD,GAlCD,MAmCG,IAAIW,KAAK,CAACsC,aAAN,CAAoBC,MAApB,GAA6B,CAA7B,IAAkCvC,KAAK,CAAC8B,YAAN,KAAuB,KAA7D,EAAmE;AAEtE,wBACE,uDAEE,oBAAC,MAAD;AAAQ,MAAA,kBAAkB,EAAErB,kBAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAIE,oBAAC,UAAD;AAAY,MAAA,QAAQ,EAAEJ,QAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,eAKE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,eAOE;AAAK,MAAA,KAAK,EAAE;AAAE0B,QAAAA,OAAO,EAAE,MAAX;AAAmBC,QAAAA,aAAa,EAAE,QAAlC;AAA4CC,QAAAA,UAAU,EAAE;AAAxD,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGO9B,eAAe,CAAC+B,GAAhB,CAAoBC,CAAC,IAAI;AAExB,0BACE,uDACE,oBAAC,cAAD;AAAgB,QAAA,IAAI,EAAEA,CAAtB;AAAyB,QAAA,GAAG,EAAEC,MAAM,CAACC,GAArC;AAA2C,QAAA,UAAU,EAAErC,KAAK,CAACX,kBAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AAKD,KAPA,CAHP,CAPF,CADF;AA0BD,GA5BI,MA8BG;AACJ,wBACE,uDAEE,oBAAC,MAAD;AAAQ,MAAA,kBAAkB,EAAEoB,kBAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAKE,oBAAC,UAAD;AAAY,MAAA,QAAQ,EAAET,KAAK,CAACsC,aAAN,CAAoBZ,UAApB,CAA+BC,QAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,eAME,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,eAQE;AAAK,MAAA,KAAK,EAAE;AAAEI,QAAAA,OAAO,EAAE,MAAX;AAAmBC,QAAAA,aAAa,EAAE,QAAlC;AAA4CC,QAAAA,UAAU,EAAE;AAAxD,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGOjC,KAAK,CAACsC,aAAN,CAAoBvB,IAApB,CAAyBmB,GAAzB,CAA6BC,CAAC,IAAI;AACjC,0BACE,uDACE,oBAAC,cAAD;AAAgB,QAAA,IAAI,EAAEA,CAAtB;AAA0B,QAAA,QAAQ,EAAEnC,KAAK,CAACsC,aAAN,CAAoBZ,UAApB,CAA+BC,QAAnE;AAA6E,QAAA,UAAU,EAAE3B,KAAK,CAACX,kBAA/F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AAKD,KANA,CAHP,CARF,CADF;AA2BD;AAIF;;AAAA;;AAGD,MAAMmD,eAAe,GAAGC,KAAK,KAAK;AAChCX,EAAAA,YAAY,EAAEW,KAAK,CAAC9B,IAAN,CAAWmB,YADO;AAEhCY,EAAAA,OAAO,EAAED,KAAK,CAAC9B,IAAN,CAAWgC,KAFY;AAGhCL,EAAAA,aAAa,EAAEG,KAAK,CAAC9B,IAAN,CAAW2B,aAHM;AAIhClB,EAAAA,UAAU,EAAEqB,KAAK,CAAC9B,IAAN,CAAWJ,KAJS;AAKhCc,EAAAA,WAAW,EAAEoB,KAAK,CAAC9B,IAAN,CAAWiC,WALQ;AAMhCzB,EAAAA,oBAAoB,EAACsB,KAAK,CAAC9B,IAAN,CAAWQ;AANA,CAAL,CAA7B;;AAQA,eAAe/B,OAAO,CACpBoD,eADoB,EAEpB;AAAElD,EAAAA,kBAAF;AAAsBD,EAAAA,kBAAtB;AAA0CE,EAAAA;AAA1C,CAFoB,CAAP,CAGbQ,KAHa,CAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { axiosWithAuth } from '../helpers/index';\nimport IndividualPost from './IndividualPost'\nimport { connect } from 'react-redux';\nimport { fetchFilteredPosts } from \"../store/actions/postActions\";\nimport { toggleSearchToTrue } from \"../store/actions/postActions\";\nimport {updatePageNumber} from '../store/actions/postActions'\n// import { changeOrderPosts } from \"../store/actions/postActions\";\n// import { fetchPosts } from \"../store/actions/postActions\";\nimport Pagination from './Pagination'\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Search from \"./Search\";\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/Select';\nimport OrderPosts from './OrderPosts'\nimport axios from 'axios';\n\n\n\nfunction Posts(props) {\n\n  const [searchPosts, setsearchPosts] = useState([])\n\n  const [initalLoadPosts, setInitialLoadPosts] = useState([])\n\n  const [numPages,setNumPages] = useState()\n  \n//  const [orderBy,setOrderBy] = useState({\n\n//    order:props.orderPosts\n\n//   })\n\nconst [order,setOrder] = useState()\n  \n  async function searchPostsHandler(term) {\n\n    axiosWithAuth()\n      .post('/post/search', { searchTerm: term })\n      .then(res => {\n        setsearchPosts(res.data)\n        props.toggleSearchToTrue()\n      })\n      .catch(err => {\n      });\n  };\n\n\n   useEffect(() => {\n    onFirstLoad()\n  \n\n    // if(props.orderPosts !== order){\n    //   props.fetchFilteredPosts(\"AllPosts\",`${props.orderPosts}`,1)\n\n    // }else{\n\n      props.fetchFilteredPosts(`${props.currentTermForFilter}`,`${props.orderPosts}`,`${props.currentPage}`)\n\n    // }\n    // setOrder(props.orderPosts)\n    \n  }, [props.currentPage,props.currentTermForFilter]);\n\n\n\n\n\n\n  function onFirstLoad(){\n\n     axios\n      .post(`${process.env.REACT_APP_API_URL}/post/filterCategory`, { category: 'AllPosts' , order: 'date', currentPage:props.currentPage })\n      .then(res => {\n        setInitialLoadPosts(res.data.data)\n        setNumPages(res.data.pagination.lastPage)\n        \n      })\n      .catch(err => {\n        console.log(err)\n      });\n\n  \n  }\n\n  // console.log(props.currentTermForFilter,\"currentTermForFilter\")\n  // console.log(props.orderPosts,\"orderPosts\")\n  // console.log(props.currentPage,\"currentPage\")\n \n console.log(initalLoadPosts,\"initalLoadPosts\")\n\n\n\n\n  \n\n\n  if (props.searchToggle === true) {\n\n    return (\n\n      <>\n\n        <Search searchPostsHandler={searchPostsHandler} />\n       \n        <Pagination numPages={numPages}/>\n        <OrderPosts/>\n\n\n        <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}>\n\n          {\n\n            searchPosts.map(p => {\n              return (\n                <>\n                  <IndividualPost post={p} key={caches.uid}  fetchPosts={props.fetchFilteredPosts} />\n                </>\n              );\n            })\n\n\n          }\n\n\n\n        </div>\n        {/* <Pagination numPages={numPages}/> */}\n      </>\n\n    )\n  }\nelse if( props.filteredPosts.length < 1 && props.searchToggle === false){\n\n  return (\n    <>\n\n      <Search searchPostsHandler={searchPostsHandler} />\n\n      <Pagination numPages={numPages}/>\n      <OrderPosts/>\n     \n      <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}>\n\n     \n            {initalLoadPosts.map(p => {\n\n              return (\n                <>\n                  <IndividualPost post={p} key={caches.uid}  fetchPosts={props.fetchFilteredPosts} />\n                </>\n              );\n            })}\n        \n\n\n      </div>\n      {/* <Pagination numPages={numPages}/> */}\n    </>\n  );\n}\n\n  else  {\n    return (\n      <>\n\n        <Search searchPostsHandler={searchPostsHandler} />\n\n        \n        <Pagination numPages={props.filteredPosts.pagination.lastPage}/>\n        <OrderPosts />\n\n        <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}>\n\n       \n              {props.filteredPosts.data.map(p => {\n                return (\n                  <>\n                    <IndividualPost post={p}  numPages={props.filteredPosts.pagination.lastPage} fetchPosts={props.fetchFilteredPosts} />\n                  </>\n                );\n              })}\n          \n  \n\n        </div>\n        {/* <Pagination numPages={numPages}/> */}\n\n      </>\n    );\n  }\n  \n\n\n};\n\n\nconst mapStateToProps = state => ({\n  searchToggle: state.post.searchToggle,\n  myposts: state.post.posts,\n  filteredPosts: state.post.filteredPosts,\n  orderPosts: state.post.order,\n  currentPage :state.post.currentpage,\n  currentTermForFilter:state.post.currentTermForFilter\n});\nexport default connect(\n  mapStateToProps,\n  { toggleSearchToTrue, fetchFilteredPosts ,updatePageNumber}\n)(Posts);"]},"metadata":{},"sourceType":"module"}