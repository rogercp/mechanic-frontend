{"ast":null,"code":"import _slicedToArray from \"/Users/roger/Projects/mechanic-frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/roger/Projects/mechanic-frontend/src/components/CarImgFixUpload.js\";\n\n/**\n * Dependencies\n */\nimport React, { useEffect, useState } from 'react';\nimport { imagesRef } from '../helpers/firebase';\nimport axiosWithAuth from '../helpers/axiosWithAuth';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport CarImageFixShow from './CarImageFixShow';\nconst useStyles = makeStyles(theme => ({\n  button: {\n    margin: theme.spacing(1)\n  }\n}));\n/**\n * Define component\n */\n\nfunction CarImgFixUpload(props) {\n  const classes = useStyles();\n\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        carFixImages = _useState2[0],\n        setCarFixImages = _useState2[1];\n\n  const _useState3 = useState({}),\n        _useState4 = _slicedToArray(_useState3, 2),\n        file = _useState4[0],\n        setFile = _useState4[1];\n\n  useEffect(() => {\n    fetchFixDocuments();\n  }, [file]);\n\n  async function fetchFixDocuments() {\n    let fixImages = await axiosWithAuth().get(\"/car_fix/\".concat(props.carFix.id, \"/images\"));\n    setCarFixImages(fixImages.data);\n    return fixImages;\n  }\n\n  function handleInputChanges(e) {\n    e.preventDefault();\n    const file = e.target.files[0];\n\n    if (!file) {\n      return;\n    }\n\n    if (file && file.size > 1e8) {\n      alert(\"File is too large. Maximum limit is 100MB.\");\n      e.target.value = '';\n    } else {\n      setFile(file);\n    }\n  }\n\n  function handleSubmitUploaderFixDocuments(e) {\n    e.preventDefault(); // Create file ref (Example: /documents/:car_id/:file_name)\n\n    const fileRef = imagesRef.child(\"\".concat(props.carFix.id, \"/\").concat(file.name)); // Upload file\n\n    fileRef.put(file).then(snapshot => {\n      // console.log('Upload success!', snapshot.constructor, snapshot);\n      axiosWithAuth().post(\"/car_fix/\".concat(props.carFix.id, \"/images\"), {\n        file_name: file.name\n      }).then(res => {\n        fetchFixDocuments();\n        window.location.reload();\n      }).catch(error => {\n        console.error(error);\n      });\n    }).catch(err => {\n      console.error(err);\n    });\n  }\n\n  if (carFixImages.length > 0) {\n    return React.createElement(React.Fragment, null, carFixImages.map((image, index) => {\n      return React.createElement(CarImageFixShow, {\n        key: index,\n        carFix: props.carFix,\n        image: image,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      });\n    }));\n  } else {\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      style: {\n        height: \"200px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        display: 'flex',\n        flexDirection: \"column\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: handleSubmitUploaderFixDocuments,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      required: true,\n      id: \"uploader\",\n      type: \"file\",\n      accept: \"image/*,.pdf,.doc\",\n      onChange: handleInputChanges,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }), React.createElement(Button, {\n      variant: \"contained\",\n      name: \"car_type\",\n      color: \"default\",\n      className: classes.button,\n      startIcon: React.createElement(CloudUploadIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }),\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \"Upload\")))));\n  }\n}\n/**\n *  Export component\n */\n\n\nexport default CarImgFixUpload;","map":{"version":3,"sources":["/Users/roger/Projects/mechanic-frontend/src/components/CarImgFixUpload.js"],"names":["React","useEffect","useState","imagesRef","axiosWithAuth","Button","makeStyles","CloudUploadIcon","CarImageFixShow","useStyles","theme","button","margin","spacing","CarImgFixUpload","props","classes","carFixImages","setCarFixImages","file","setFile","fetchFixDocuments","fixImages","get","carFix","id","data","handleInputChanges","e","preventDefault","target","files","size","alert","value","handleSubmitUploaderFixDocuments","fileRef","child","name","put","then","snapshot","post","file_name","res","window","location","reload","catch","error","console","err","length","map","image","index","height","display","flexDirection"],"mappings":"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","sourcesContent":["/**\n * Dependencies\n */\n\nimport React, { useEffect, useState } from 'react';\nimport { imagesRef } from '../helpers/firebase';\nimport axiosWithAuth from '../helpers/axiosWithAuth';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport CarImageFixShow from './CarImageFixShow';\n\nconst useStyles = makeStyles(theme => ({\n    button: {\n      margin: theme.spacing(1),\n    },\n  }));\n/**\n * Define component\n */\n\nfunction CarImgFixUpload(props) {\n\n\n    const classes = useStyles();\n    const [carFixImages, setCarFixImages] = useState([]);\n    const [file, setFile] = useState({});\n\n    useEffect(() => {\n        fetchFixDocuments();\n    }, [file]);\n\n    \n\n    async function fetchFixDocuments() {\n        let fixImages = await axiosWithAuth().get(`/car_fix/${props.carFix.id}/images`)\n        setCarFixImages(fixImages.data);\n        return fixImages;\n    }\n\n    function handleInputChanges(e) {\n        e.preventDefault();\n        const file = e.target.files[0]\n        if (!file) {\n            return;\n        }\n        if (file && file.size > 1e8) {\n            alert(\"File is too large. Maximum limit is 100MB.\")\n            e.target.value = ''\n        } else {\n            setFile(file);\n        }\n    }\n\n    function handleSubmitUploaderFixDocuments(e) {\n        e.preventDefault()\n        // Create file ref (Example: /documents/:car_id/:file_name)\n        const fileRef = imagesRef.child(`${props.carFix.id}/${file.name}`)\n        // Upload file\n        fileRef.put(file).then((snapshot) => {\n            // console.log('Upload success!', snapshot.constructor, snapshot);\n            axiosWithAuth().post(`/car_fix/${props.carFix.id}/images`, { file_name: file.name })\n                .then(res => {\n                    fetchFixDocuments();\n                    window.location.reload();               \n                 })\n                .catch(error => {\n                    console.error(error);\n                })\n        }).catch(err => {\n            console.error(err)\n        });\n    }\n    \n\n\n    if(carFixImages.length > 0 ){\n        return (\n        <>\n                    {carFixImages.map((image, index) => {\n                        return <CarImageFixShow  key={index}  carFix={props.carFix} image={image}/>\n                    })} \n        </>\n        )\n    }else{\n        return (\n            <>\n                <div style={{height:\"200px\"}}>\n                <div style={{display:'flex',flexDirection:\"column\"}}>\n                 <form onSubmit= {handleSubmitUploaderFixDocuments}> \n                <input required id=\"uploader\" type=\"file\" accept=\"image/*,.pdf,.doc\" onChange={handleInputChanges}></input>\n                    <Button\n                    variant=\"contained\"\n                    name=\"car_type\"\n                    color=\"default\"\n                    className={classes.button}\n                    startIcon={<CloudUploadIcon />}\n                    type =\"submit\"\n                    >\n                    Upload\n                </Button>\n                </form>\n                </div>\n                </div>\n                \n            </>\n        )\n    }\n   \n        \n    \n}\n\n/**\n *  Export component\n */\n\nexport default CarImgFixUpload;\n"]},"metadata":{},"sourceType":"module"}