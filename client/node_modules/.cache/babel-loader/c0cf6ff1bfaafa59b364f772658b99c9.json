{"ast":null,"code":"import _slicedToArray from \"/Users/roger/Projects/mechanic-frontend/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/roger/Projects/mechanic-frontend/client/src/components/ProfileImageShow.js\";\nimport React, { useEffect, useState } from 'react';\nimport { imagesRef } from '../helpers/firebase';\nimport { Image } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { fetchProfileImage } from \"../store/actions/settingsActions\";\n\nfunction ProfileImageShow(props) {\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        thisImage = _useState2[0],\n        setThisimage = _useState2[1]; // const [imagine,setImagine] = useState()\n\n\n  const userId = localStorage.getItem('id'); //     const fileRef = imagesRef.child(`${userId}/${props.userImage && props.userImage.file_name}`);\n  //     console.log(props.userImage,\"image\")\n  //     useEffect(() => {\n  //       props.fetchProfileImage(userId)\n  //       console.log(props.userImage,\"image\")\n  // if(props.userImage){\n  //     function getImg() {\n  //       fileRef.getMetadata().then((metadata) => {\n  //         fileRef.getDownloadURL().then(url => {\n  //           setThisimage(url)\n  //           // let img = document.getElementById('document-image');\n  //           // if (metadata.contentType === 'application/pdf') {\n  //           //     img.src = '';\n  //           //     // TODO handle PDFs\n  //           //   } else {\n  //           //     img.src = url;\n  //           //   }\n  //         })\n  //         .catch(err => {\n  //           console.error(err);\n  //         })\n  //       }).catch((err) => {\n  //         console.error(err);\n  //       });\n  //     }\n  //     getImg()\n  //   }\n  //     }, []);\n\n  props.fetchProfileImage(userId);\n  const fileRef = imagesRef.child(\"\".concat(userId, \"/\").concat(props.userImage ? props.userImage.file_name : \"0\"));\n  getImg(fileRef);\n\n  function getImg(fileRef) {\n    fileRef.getMetadata().then(metadata => {\n      fileRef.getDownloadURL().then(url => {\n        setThisimage(url); // let img = document.getElementById('document-image');\n        // if (metadata.contentType === 'application/pdf') {\n        //     img.src = '';\n        //     // TODO handle PDFs\n        //   } else {\n        //     img.src = url;\n        //   }\n      }).catch(err => {\n        console.error(err);\n      });\n    }).catch(err => {\n      console.error(err);\n    });\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(Image, {\n    src: \"holder.js/171x180\",\n    rounded: true,\n    id: \"reg-image\",\n    style: {\n      height: \"200px\"\n    },\n    src: \"\".concat(thisImage),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }));\n}\n\nconst mapStateToProps = state => ({\n  userImage: state.setting.userImage\n});\n\nexport default connect(mapStateToProps, {\n  fetchProfileImage\n})(ProfileImageShow);","map":{"version":3,"sources":["/Users/roger/Projects/mechanic-frontend/client/src/components/ProfileImageShow.js"],"names":["React","useEffect","useState","imagesRef","Image","connect","fetchProfileImage","ProfileImageShow","props","thisImage","setThisimage","userId","localStorage","getItem","fileRef","child","userImage","file_name","getImg","getMetadata","then","metadata","getDownloadURL","url","catch","err","console","error","height","mapStateToProps","state","setting"],"mappings":";;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,KAAT,QAAsB,iBAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,iBAAT,QAAkC,kCAAlC;;AAIA,SAASC,gBAAT,CAA0BC,KAA1B,EAAiC;AAAA,oBAEGN,QAAQ,CAAC,EAAD,CAFX;AAAA;AAAA,QAEtBO,SAFsB;AAAA,QAEZC,YAFY,kBAG7B;;;AAEA,QAAMC,MAAM,GAAGC,YAAY,CAACC,OAAb,CAAqB,IAArB,CAAf,CAL6B,CAQjC;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAMEL,EAAAA,KAAK,CAACF,iBAAN,CAAwBK,MAAxB;AAEA,QAAMG,OAAO,GAAGX,SAAS,CAACY,KAAV,WAAmBJ,MAAnB,cAA6BH,KAAK,CAACQ,SAAN,GAAkBR,KAAK,CAACQ,SAAN,CAAgBC,SAAlC,GAA8C,GAA3E,EAAhB;AAEAC,EAAAA,MAAM,CAACJ,OAAD,CAAN;;AAGE,WAASI,MAAT,CAAgBJ,OAAhB,EAAyB;AACrBA,IAAAA,OAAO,CAACK,WAAR,GAAsBC,IAAtB,CAA4BC,QAAD,IAAc;AACvCP,MAAAA,OAAO,CAACQ,cAAR,GAAyBF,IAAzB,CAA8BG,GAAG,IAAI;AAEnCb,QAAAA,YAAY,CAACa,GAAD,CAAZ,CAFmC,CAInC;AACA;AACA;AACA;AACA;AACA;AACA;AACD,OAXD,EAYCC,KAZD,CAYOC,GAAG,IAAI;AACZC,QAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACD,OAdD;AAeD,KAhBD,EAgBGD,KAhBH,CAgBUC,GAAD,IAAS;AAChBC,MAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACD,KAlBD;AAmBD;;AAQH,SACI,0CAEI,oBAAC,KAAD;AAAO,IAAA,GAAG,EAAC,mBAAX;AAA+B,IAAA,OAAO,MAAtC;AAAuC,IAAA,EAAE,EAAC,WAA1C;AAAuD,IAAA,KAAK,EAAE;AAACG,MAAAA,MAAM,EAAC;AAAR,KAA9D;AAAgF,IAAA,GAAG,YAAKnB,SAAL,CAAnF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ;AAQH;;AAKD,MAAMoB,eAAe,GAAGC,KAAK,KAAK;AAChCd,EAAAA,SAAS,EAAGc,KAAK,CAACC,OAAN,CAAcf;AADM,CAAL,CAA7B;;AAGA,eAAeX,OAAO,CACpBwB,eADoB,EAEpB;AAACvB,EAAAA;AAAD,CAFoB,CAAP,CAGbC,gBAHa,CAAf","sourcesContent":["\n\nimport React, { useEffect, useState } from 'react';\nimport { imagesRef } from '../helpers/firebase';\nimport { Image } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { fetchProfileImage } from \"../store/actions/settingsActions\";\n\n\n\nfunction ProfileImageShow(props) {\n\n    const [thisImage,setThisimage]= useState('')\n    // const [imagine,setImagine] = useState()\n\n    const userId = localStorage.getItem('id');\n\n\n//     const fileRef = imagesRef.child(`${userId}/${props.userImage && props.userImage.file_name}`);\n\n//     console.log(props.userImage,\"image\")\n\n//     useEffect(() => {\n//       props.fetchProfileImage(userId)\n//       console.log(props.userImage,\"image\")\n      \n// if(props.userImage){\n      \n//     function getImg() {\n//       fileRef.getMetadata().then((metadata) => {\n//         fileRef.getDownloadURL().then(url => {\n\n//           setThisimage(url)\n\n//           // let img = document.getElementById('document-image');\n//           // if (metadata.contentType === 'application/pdf') {\n//           //     img.src = '';\n//           //     // TODO handle PDFs\n//           //   } else {\n//           //     img.src = url;\n//           //   }\n//         })\n//         .catch(err => {\n//           console.error(err);\n//         })\n//       }).catch((err) => {\n//         console.error(err);\n//       });\n//     }\n//     getImg()\n//   }\n \n//     }, []);\n   \n\n    \n\n  \n  props.fetchProfileImage(userId)\n\n  const fileRef = imagesRef.child(`${userId}/${props.userImage ? props.userImage.file_name : \"0\"}`);\n  \n  getImg(fileRef)    \n    \n   \n    function getImg(fileRef) {\n        fileRef.getMetadata().then((metadata) => {\n          fileRef.getDownloadURL().then(url => {\n  \n            setThisimage(url)\n  \n            // let img = document.getElementById('document-image');\n            // if (metadata.contentType === 'application/pdf') {\n            //     img.src = '';\n            //     // TODO handle PDFs\n            //   } else {\n            //     img.src = url;\n            //   }\n          })\n          .catch(err => {\n            console.error(err);\n          })\n        }).catch((err) => {\n          console.error(err);\n        });\n      }\n    \n  \n\n\n\n\n\n    return(\n        <>\n            {/* {(metadata.contentType === 'application/pdf')? <div id=\"div-pdf\" src={`${thisImage}`}></div> :  <img id=\"reg-image\" height=\"200px\" src={`${thisImage}`}></img>} */}\n            <Image src=\"holder.js/171x180\" rounded id=\"reg-image\"  style={{height:\"200px\"}} src={`${thisImage}`}/>\n            {/* {props.image.file_name} */}\n\n        </>\n    )\n}\n\n\n\n\nconst mapStateToProps = state => ({\n  userImage : state.setting.userImage\n});\nexport default connect(\n  mapStateToProps,\n  {fetchProfileImage}\n)(ProfileImageShow);\n"]},"metadata":{},"sourceType":"module"}