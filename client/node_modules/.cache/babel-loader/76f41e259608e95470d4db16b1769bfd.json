{"ast":null,"code":"import _slicedToArray from \"/Users/roger/Projects/mechanic-frontend/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/roger/Projects/mechanic-frontend/client/src/components/ProfileImageShow.js\";\nimport React, { useEffect, useState } from 'react';\nimport { imagesRef } from '../helpers/firebase';\nimport { Image } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { fetchProfileImage } from \"../store/actions/settingsActions\";\n\nfunction ProfileImageShow(props) {\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        thisImage = _useState2[0],\n        setThisimage = _useState2[1];\n\n  const _useState3 = useState(),\n        _useState4 = _slicedToArray(_useState3, 2),\n        imagine = _useState4[0],\n        setImagine = _useState4[1];\n\n  const userId = localStorage.getItem('id');\n  const fileRef = imagesRef.child(\"\".concat(userId, \"/\").concat(props.userImage && Imagine.file_name));\n  console.log(props.userImage, \"image\");\n  useEffect(() => {\n    props.fetchProfileImage(userId);\n    console.log(props.userImage, \"image\");\n\n    if (props.userImage) {\n      function getImg() {\n        fileRef.getMetadata().then(metadata => {\n          fileRef.getDownloadURL().then(url => {\n            setThisimage(url); // let img = document.getElementById('document-image');\n            // if (metadata.contentType === 'application/pdf') {\n            //     img.src = '';\n            //     // TODO handle PDFs\n            //   } else {\n            //     img.src = url;\n            //   }\n          }).catch(err => {\n            console.error(err);\n          });\n        }).catch(err => {\n          console.error(err);\n        });\n      }\n\n      getImg();\n    }\n  }, []); //   props.fetchProfileImage(userId)\n  // if(props.userImage){\n  //   setImagine(props.userImage)\n  // }\n  //   const fileRef = imagesRef.child(`${userId}/${props.userImage ? props.userImage.file_name : \"0\"}`);\n  //   if(fileRef){\n  //     getImg(fileRef)    \n  //   }\n  //     function getImg(fileRef) {\n  //         fileRef.getMetadata().then((metadata) => {\n  //           fileRef.getDownloadURL().then(url => {\n  //             setThisimage(url)\n  //             // let img = document.getElementById('document-image');\n  //             // if (metadata.contentType === 'application/pdf') {\n  //             //     img.src = '';\n  //             //     // TODO handle PDFs\n  //             //   } else {\n  //             //     img.src = url;\n  //             //   }\n  //           })\n  //           .catch(err => {\n  //             console.error(err);\n  //           })\n  //         }).catch((err) => {\n  //           console.error(err);\n  //         });\n  //       }\n\n  return React.createElement(React.Fragment, null, React.createElement(Image, {\n    src: \"holder.js/171x180\",\n    rounded: true,\n    id: \"reg-image\",\n    style: {\n      height: \"200px\"\n    },\n    src: \"\".concat(thisImage),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }));\n}\n\nconst mapStateToProps = state => ({\n  userImage: state.setting.userImage\n});\n\nexport default connect(mapStateToProps, {\n  fetchProfileImage\n})(ProfileImageShow);","map":{"version":3,"sources":["/Users/roger/Projects/mechanic-frontend/client/src/components/ProfileImageShow.js"],"names":["React","useEffect","useState","imagesRef","Image","connect","fetchProfileImage","ProfileImageShow","props","thisImage","setThisimage","imagine","setImagine","userId","localStorage","getItem","fileRef","child","userImage","Imagine","file_name","console","log","getImg","getMetadata","then","metadata","getDownloadURL","url","catch","err","error","height","mapStateToProps","state","setting"],"mappings":";;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,KAAT,QAAsB,iBAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,iBAAT,QAAkC,kCAAlC;;AAIA,SAASC,gBAAT,CAA0BC,KAA1B,EAAiC;AAAA,oBAEGN,QAAQ,CAAC,EAAD,CAFX;AAAA;AAAA,QAEtBO,SAFsB;AAAA,QAEZC,YAFY;;AAAA,qBAGAR,QAAQ,EAHR;AAAA;AAAA,QAGtBS,OAHsB;AAAA,QAGdC,UAHc;;AAK7B,QAAMC,MAAM,GAAGC,YAAY,CAACC,OAAb,CAAqB,IAArB,CAAf;AAGA,QAAMC,OAAO,GAAGb,SAAS,CAACc,KAAV,WAAmBJ,MAAnB,cAA6BL,KAAK,CAACU,SAAN,IAAmBC,OAAO,CAACC,SAAxD,EAAhB;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAYd,KAAK,CAACU,SAAlB,EAA4B,OAA5B;AAEAjB,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,KAAK,CAACF,iBAAN,CAAwBO,MAAxB;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAYd,KAAK,CAACU,SAAlB,EAA4B,OAA5B;;AAEN,QAAGV,KAAK,CAACU,SAAT,EAAmB;AAEf,eAASK,MAAT,GAAkB;AAChBP,QAAAA,OAAO,CAACQ,WAAR,GAAsBC,IAAtB,CAA4BC,QAAD,IAAc;AACvCV,UAAAA,OAAO,CAACW,cAAR,GAAyBF,IAAzB,CAA8BG,GAAG,IAAI;AAEnClB,YAAAA,YAAY,CAACkB,GAAD,CAAZ,CAFmC,CAInC;AACA;AACA;AACA;AACA;AACA;AACA;AACD,WAXD,EAYCC,KAZD,CAYOC,GAAG,IAAI;AACZT,YAAAA,OAAO,CAACU,KAAR,CAAcD,GAAd;AACD,WAdD;AAeD,SAhBD,EAgBGD,KAhBH,CAgBUC,GAAD,IAAS;AAChBT,UAAAA,OAAO,CAACU,KAAR,CAAcD,GAAd;AACD,SAlBD;AAmBD;;AACDP,MAAAA,MAAM;AACP;AAEE,GA9BQ,EA8BN,EA9BM,CAAT,CAZ6B,CAgDjC;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAQI,SACI,0CAEI,oBAAC,KAAD;AAAO,IAAA,GAAG,EAAC,mBAAX;AAA+B,IAAA,OAAO,MAAtC;AAAuC,IAAA,EAAE,EAAC,WAA1C;AAAuD,IAAA,KAAK,EAAE;AAACS,MAAAA,MAAM,EAAC;AAAR,KAA9D;AAAgF,IAAA,GAAG,YAAKvB,SAAL,CAAnF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ;AAQH;;AAKD,MAAMwB,eAAe,GAAGC,KAAK,KAAK;AAChChB,EAAAA,SAAS,EAAGgB,KAAK,CAACC,OAAN,CAAcjB;AADM,CAAL,CAA7B;;AAGA,eAAeb,OAAO,CACpB4B,eADoB,EAEpB;AAAC3B,EAAAA;AAAD,CAFoB,CAAP,CAGbC,gBAHa,CAAf","sourcesContent":["\n\nimport React, { useEffect, useState } from 'react';\nimport { imagesRef } from '../helpers/firebase';\nimport { Image } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { fetchProfileImage } from \"../store/actions/settingsActions\";\n\n\n\nfunction ProfileImageShow(props) {\n\n    const [thisImage,setThisimage]= useState('')\n    const [imagine,setImagine] = useState()\n\n    const userId = localStorage.getItem('id');\n\n\n    const fileRef = imagesRef.child(`${userId}/${props.userImage && Imagine.file_name}`);\n\n    console.log(props.userImage,\"image\")\n\n    useEffect(() => {\n      props.fetchProfileImage(userId)\n      console.log(props.userImage,\"image\")\n      \nif(props.userImage){\n      \n    function getImg() {\n      fileRef.getMetadata().then((metadata) => {\n        fileRef.getDownloadURL().then(url => {\n\n          setThisimage(url)\n\n          // let img = document.getElementById('document-image');\n          // if (metadata.contentType === 'application/pdf') {\n          //     img.src = '';\n          //     // TODO handle PDFs\n          //   } else {\n          //     img.src = url;\n          //   }\n        })\n        .catch(err => {\n          console.error(err);\n        })\n      }).catch((err) => {\n        console.error(err);\n      });\n    }\n    getImg()\n  }\n \n    }, []);\n   \n\n    \n\n  \n//   props.fetchProfileImage(userId)\n\n// if(props.userImage){\n//   setImagine(props.userImage)\n// }\n\n//   const fileRef = imagesRef.child(`${userId}/${props.userImage ? props.userImage.file_name : \"0\"}`);\n  \n//   if(fileRef){\n    \n//     getImg(fileRef)    \n//   }\n   \n//     function getImg(fileRef) {\n      \n//         fileRef.getMetadata().then((metadata) => {\n//           fileRef.getDownloadURL().then(url => {\n  \n//             setThisimage(url)\n  \n//             // let img = document.getElementById('document-image');\n//             // if (metadata.contentType === 'application/pdf') {\n//             //     img.src = '';\n//             //     // TODO handle PDFs\n//             //   } else {\n//             //     img.src = url;\n//             //   }\n//           })\n//           .catch(err => {\n//             console.error(err);\n//           })\n//         }).catch((err) => {\n//           console.error(err);\n//         });\n//       }\n    \n  \n\n\n\n\n\n    return(\n        <>\n            {/* {(metadata.contentType === 'application/pdf')? <div id=\"div-pdf\" src={`${thisImage}`}></div> :  <img id=\"reg-image\" height=\"200px\" src={`${thisImage}`}></img>} */}\n            <Image src=\"holder.js/171x180\" rounded id=\"reg-image\"  style={{height:\"200px\"}} src={`${thisImage}`}/>\n            {/* {props.image.file_name} */}\n\n        </>\n    )\n}\n\n\n\n\nconst mapStateToProps = state => ({\n  userImage : state.setting.userImage\n});\nexport default connect(\n  mapStateToProps,\n  {fetchProfileImage}\n)(ProfileImageShow);\n"]},"metadata":{},"sourceType":"module"}