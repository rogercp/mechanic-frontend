{"ast":null,"code":"import _slicedToArray from \"/Users/roger/Projects/mechanic-frontend/mechanic/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/roger/Projects/mechanic-frontend/mechanic/src/components/CarImgUpload.js\";\n\n/**\n * Dependencies\n */\nimport React, { useEffect, useState } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport { imagesRef } from '../helpers/firebase';\nimport axiosWithAuth from '../helpers/axiosWithAuth';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport CarImgShow from './CarImgShow';\nconst useStyles = makeStyles(theme => ({\n  button: {\n    margin: theme.spacing(1)\n  }\n}));\n/**\n * Define component\n */\n\nfunction CarImgUpload(props) {\n  const classes = useStyles();\n\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        images = _useState2[0],\n        setImages = _useState2[1];\n\n  const _useState3 = useState({}),\n        _useState4 = _slicedToArray(_useState3, 2),\n        file = _useState4[0],\n        setFile = _useState4[1];\n\n  function handleInputChanges(e) {\n    e.preventDefault();\n    const file = e.target.files[0];\n\n    if (!file) {\n      return;\n    }\n\n    if (file && file.size > 1e8) {\n      alert(\"File is too large. Maximum limit is 100MB.\");\n      e.target.value = '';\n    } else {\n      setFile(file);\n    }\n  }\n\n  function handleSubmitUploader(e) {\n    e.preventDefault();\n    console.log(props.car.id, \"carid\"); // Create file ref (Example: /documents/:car_id/:file_name)\n\n    const fileRef = imagesRef.child(\"\".concat(props.car.id, \"/\").concat(file.name)); // Upload file\n\n    fileRef.put(file).then(snapshot => {\n      console.log('Upload success!', snapshot.constructor, snapshot);\n      axiosWithAuth().post(\"/cars/\".concat(props.car.id, \"/images\"), {\n        file_name: file.name\n      }).then(res => {\n        console.log(\"success\");\n      }).catch(error => {\n        console.error(error);\n      });\n    });\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(\"form\", {\n    onSubmit: handleSubmitUploader,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    required: true,\n    id: \"uploader\",\n    type: \"file\",\n    accept: \"image/*,.pdf,.doc\",\n    onChange: handleInputChanges,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }), React.createElement(Button, {\n    variant: \"contained\",\n    name: \"car_type\",\n    color: \"default\",\n    className: classes.button,\n    startIcon: React.createElement(CloudUploadIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }),\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, \"Upload\")), React.createElement(CarImgShow, {\n    car: props.car,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }));\n}\n/**\n *  Export component\n */\n\n\nexport default CarImgUpload;","map":{"version":3,"sources":["/Users/roger/Projects/mechanic-frontend/mechanic/src/components/CarImgUpload.js"],"names":["React","useEffect","useState","Typography","imagesRef","axiosWithAuth","Button","makeStyles","CloudUploadIcon","CarImgShow","useStyles","theme","button","margin","spacing","CarImgUpload","props","classes","images","setImages","file","setFile","handleInputChanges","e","preventDefault","target","files","size","alert","value","handleSubmitUploader","console","log","car","id","fileRef","child","name","put","then","snapshot","constructor","post","file_name","res","catch","error"],"mappings":"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","sourcesContent":["/**\n * Dependencies\n */\n\nimport React, { useEffect, useState } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport { imagesRef } from '../helpers/firebase';\nimport axiosWithAuth from '../helpers/axiosWithAuth';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport CarImgShow from './CarImgShow';\n\n\nconst useStyles = makeStyles(theme => ({\n    button: {\n      margin: theme.spacing(1),\n    },\n  }));\n/**\n * Define component\n */\n\nfunction CarImgUpload(props) {\n\n    const classes = useStyles();\n    const [images, setImages] = useState([]);\n    const [file, setFile] = useState({});\n\n    function handleInputChanges(e) {\n        e.preventDefault();\n        const file = e.target.files[0]\n        if (!file) {\n            return;\n        }\n        if (file && file.size > 1e8) {\n            alert(\"File is too large. Maximum limit is 100MB.\")\n            e.target.value = ''\n        } else {\n            setFile(file);\n        }\n    }\n\n    function handleSubmitUploader(e) {\n        e.preventDefault()\n        console.log(props.car.id,\"carid\")\n\n        // Create file ref (Example: /documents/:car_id/:file_name)\n        const fileRef = imagesRef.child(`${props.car.id}/${file.name}`)\n\n        // Upload file\n        fileRef.put(file).then((snapshot) => {\n            console.log('Upload success!', snapshot.constructor, snapshot);\n            axiosWithAuth().post(`/cars/${props.car.id}/images`, { file_name: file.name })\n                .then(res => {\n                    console.log(\"success\")\n                })\n                .catch(error => {\n                    console.error(error);\n                })\n        })\n    }\n\n   \n        return (\n            <>\n\n                <form onSubmit={handleSubmitUploader}>\n                \n                    <input required id=\"uploader\" type=\"file\" accept=\"image/*,.pdf,.doc\" onChange={handleInputChanges}></input>\n                    <Button\n                    variant=\"contained\"\n                    name=\"car_type\"\n                    color=\"default\"\n                    className={classes.button}\n                    startIcon={<CloudUploadIcon />}\n                    type =\"submit\"\n                    >\n                    Upload\n                </Button>\n                </form>\n                <CarImgShow car={props.car}/>\n            </>\n        )\n    \n}\n\n/**\n *  Export component\n */\n\nexport default CarImgUpload;\n"]},"metadata":{},"sourceType":"module"}