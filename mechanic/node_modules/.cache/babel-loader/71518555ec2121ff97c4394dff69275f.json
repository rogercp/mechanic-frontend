{"ast":null,"code":"const firebase = require('firebase');\n\nconst firebaseui = require('firebaseui'); // initializing app with firebase\n\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyBz6Bol0rPrG-wyJ0MJFFdc7FUoAIgt55I\",\n  authDomain: \"mech-3223c.firebaseapp.com\",\n  databaseURL: \"https://mech-3223c.firebaseio.com\",\n  projectId: \"mech-3223c\",\n  storageBucket: \"mech-3223c.appspot.com\",\n  messagingSenderId: \"993844135178\",\n  appId: \"1:993844135178:web:41f005098762ccb5a366f3\",\n  measurementId: \"G-0RF7LZM065\"\n};\nfirebase.initializeApp(firebaseConfig); // firebase.analytics();\n// Initialize the FirebaseUI Widget using Firebase.\n\nvar ui = new firebaseui.auth.AuthUI(firebase.auth());\nvar uiConfig = {\n  callbacks: {\n    signInSuccessWithAuthResult: function (authResult, redirectUrl) {\n      // User successfully signed in.\n      // Return type determines whether we continue the redirect automatically\n      // or whether we leave that to developer to handle.\n      return true;\n    },\n    uiShown: function () {\n      // The widget is rendered.\n      // Hide the loader.\n      document.getElementById('loader').style.display = 'none';\n    }\n  },\n  // Will use popup for IDP Providers sign-in flow instead of the default, redirect.\n  signInFlow: 'popup',\n  signInSuccessUrl: '/auth/callback',\n  signInOptions: [// Leave the lines as is for the providers you want to offer your users.\n  firebase.auth.GoogleAuthProvider.PROVIDER_ID, firebase.auth.EmailAuthProvider.PROVIDER_ID],\n  // Terms of service url.\n  tosUrl: '/terms-of-service',\n  // Privacy policy url.\n  privacyPolicyUrl: '/privacy-policy'\n};\n\nfunction wrappedStart() {\n  ui.start('#firebaseui-auth-container', uiConfig);\n} // const storage = firebase.storage();\n// const storageRef = storage.ref();\n// const documentsRef = storageRef.child('documents');\n// export {\n//   documentsRef\n// }\n\n\nexport default wrappedStart;","map":{"version":3,"sources":["/Users/roger/Projects/mechanic-front/mechanic-frontend/mechanic/src/helpers/firebase.js"],"names":["firebase","require","firebaseui","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","ui","auth","AuthUI","uiConfig","callbacks","signInSuccessWithAuthResult","authResult","redirectUrl","uiShown","document","getElementById","style","display","signInFlow","signInSuccessUrl","signInOptions","GoogleAuthProvider","PROVIDER_ID","EmailAuthProvider","tosUrl","privacyPolicyUrl","wrappedStart","start"],"mappings":"AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,YAAD,CAA1B,C,CAGA;;;AAEA,IAAIE,cAAc,GAAG;AACjBC,EAAAA,MAAM,EAAE,yCADS;AAEjBC,EAAAA,UAAU,EAAE,4BAFK;AAGjBC,EAAAA,WAAW,EAAE,mCAHI;AAIjBC,EAAAA,SAAS,EAAE,YAJM;AAKjBC,EAAAA,aAAa,EAAE,wBALE;AAMjBC,EAAAA,iBAAiB,EAAE,cANF;AAOjBC,EAAAA,KAAK,EAAE,2CAPU;AAQjBC,EAAAA,aAAa,EAAE;AARE,CAArB;AAWEX,QAAQ,CAACY,aAAT,CAAuBT,cAAvB,E,CACA;AAGF;;AACA,IAAIU,EAAE,GAAG,IAAIX,UAAU,CAACY,IAAX,CAAgBC,MAApB,CAA2Bf,QAAQ,CAACc,IAAT,EAA3B,CAAT;AAEA,IAAIE,QAAQ,GAAG;AACXC,EAAAA,SAAS,EAAE;AACTC,IAAAA,2BAA2B,EAAE,UAASC,UAAT,EAAqBC,WAArB,EAAkC;AAC7D;AACA;AACA;AACA,aAAO,IAAP;AACD,KANQ;AAOTC,IAAAA,OAAO,EAAE,YAAW;AAClB;AACA;AACAC,MAAAA,QAAQ,CAACC,cAAT,CAAwB,QAAxB,EAAkCC,KAAlC,CAAwCC,OAAxC,GAAkD,MAAlD;AACD;AAXQ,GADA;AAcX;AACAC,EAAAA,UAAU,EAAE,OAfD;AAgBXC,EAAAA,gBAAgB,EAAE,gBAhBP;AAiBXC,EAAAA,aAAa,EAAE,CACb;AACA5B,EAAAA,QAAQ,CAACc,IAAT,CAAce,kBAAd,CAAiCC,WAFpB,EAGb9B,QAAQ,CAACc,IAAT,CAAciB,iBAAd,CAAgCD,WAHnB,CAjBJ;AAuBX;AACAE,EAAAA,MAAM,EAAE,mBAxBG;AAyBX;AACAC,EAAAA,gBAAgB,EAAE;AA1BP,CAAf;;AA8BE,SAASC,YAAT,GAAwB;AACtBrB,EAAAA,EAAE,CAACsB,KAAH,CAAS,4BAAT,EAAuCnB,QAAvC;AACD,C,CAGD;AACA;AACA;AAEA;AACA;AACA;;;AAGA,eAAekB,YAAf","sourcesContent":["const firebase = require('firebase');\nconst firebaseui = require('firebaseui');\n\n\n// initializing app with firebase\n\nvar firebaseConfig = {\n    apiKey: \"AIzaSyBz6Bol0rPrG-wyJ0MJFFdc7FUoAIgt55I\",\n    authDomain: \"mech-3223c.firebaseapp.com\",\n    databaseURL: \"https://mech-3223c.firebaseio.com\",\n    projectId: \"mech-3223c\",\n    storageBucket: \"mech-3223c.appspot.com\",\n    messagingSenderId: \"993844135178\",\n    appId: \"1:993844135178:web:41f005098762ccb5a366f3\",\n    measurementId: \"G-0RF7LZM065\"\n  };\n\n  firebase.initializeApp(firebaseConfig);\n  // firebase.analytics();\n\n\n// Initialize the FirebaseUI Widget using Firebase.\nvar ui = new firebaseui.auth.AuthUI(firebase.auth());\n\nvar uiConfig = {\n    callbacks: {\n      signInSuccessWithAuthResult: function(authResult, redirectUrl) {\n        // User successfully signed in.\n        // Return type determines whether we continue the redirect automatically\n        // or whether we leave that to developer to handle.\n        return true;\n      },\n      uiShown: function() {\n        // The widget is rendered.\n        // Hide the loader.\n        document.getElementById('loader').style.display = 'none';\n      }\n    },\n    // Will use popup for IDP Providers sign-in flow instead of the default, redirect.\n    signInFlow: 'popup',\n    signInSuccessUrl: '/auth/callback',\n    signInOptions: [\n      // Leave the lines as is for the providers you want to offer your users.\n      firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n      firebase.auth.EmailAuthProvider.PROVIDER_ID,\n\n    ],\n    // Terms of service url.\n    tosUrl: '/terms-of-service',\n    // Privacy policy url.\n    privacyPolicyUrl: '/privacy-policy'\n  };\n  \n\n  function wrappedStart() {\n    ui.start('#firebaseui-auth-container', uiConfig);\n  }\n\n\n  // const storage = firebase.storage();\n  // const storageRef = storage.ref();\n  // const documentsRef = storageRef.child('documents');\n  \n  // export {\n  //   documentsRef\n  // }\n  \n\n  export default wrappedStart;\n"]},"metadata":{},"sourceType":"module"}