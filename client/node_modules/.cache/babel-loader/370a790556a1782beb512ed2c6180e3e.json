{"ast":null,"code":"import { ADD_POST_START, ADD_POST_SUCCESS, ADD_POST_FAILURE, FETCH_POST_START, FETCH_POST_SUCCESS, FETCH_POST_FAILURE, FETCH_FILTEREDPOST_START, FETCH_FILTEREDPOST_SUCCESS, FETCH_FILTEREDPOST_FAILURE, TOGGLE_SEARCH_TO_TRUE, TOGGLE_SEARCH_TO_FALSE } from '../actions/postActions';\nconst initialState = {\n  addingPost: false,\n  posts: [],\n  filteredPosts: [],\n  searchToggle: false,\n  currentPost: {}\n};\n\nconst postReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST_SUCCESS:\n      return { ...state,\n        currentPost: action.payload\n      };\n\n    case FETCH_POST_SUCCESS:\n      return { ...state,\n        posts: action.payload\n      };\n\n    case FETCH_FILTEREDPOST_SUCCESS:\n      return { ...state,\n        filteredPosts: action.payload\n      };\n\n    case TOGGLE_SEARCH_TO_TRUE:\n      return { ...state,\n        searchToggle: true\n      };\n\n    case TOGGLE_SEARCH_TO_FALSE:\n      return { ...state,\n        searchToggle: false\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default postReducer;","map":{"version":3,"sources":["/Users/roger/Projects/mechanic-frontend/client/src/store/reducers/postReducer.js"],"names":["ADD_POST_START","ADD_POST_SUCCESS","ADD_POST_FAILURE","FETCH_POST_START","FETCH_POST_SUCCESS","FETCH_POST_FAILURE","FETCH_FILTEREDPOST_START","FETCH_FILTEREDPOST_SUCCESS","FETCH_FILTEREDPOST_FAILURE","TOGGLE_SEARCH_TO_TRUE","TOGGLE_SEARCH_TO_FALSE","initialState","addingPost","posts","filteredPosts","searchToggle","currentPost","postReducer","state","action","type","payload"],"mappings":"AAAA,SACAA,cADA,EAECC,gBAFD,EAGCC,gBAHD,EAICC,gBAJD,EAKCC,kBALD,EAMCC,kBAND,EAOCC,wBAPD,EAQAC,0BARA,EASAC,0BATA,EAUAC,qBAVA,EAWAC,sBAXA,QAYM,wBAZN;AAcA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,UAAU,EAAC,KADM;AAEjBC,EAAAA,KAAK,EAAE,EAFU;AAGjBC,EAAAA,aAAa,EAAC,EAHG;AAIjBC,EAAAA,YAAY,EAAC,KAJI;AAKjBC,EAAAA,WAAW,EAAC;AALK,CAArB;;AAUA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGP,YAAT,EAAuBQ,MAAvB,KAAkC;AAElD,UAAQA,MAAM,CAACC,IAAf;AAGE,SAAMnB,gBAAN;AACE,aAAO,EACL,GAAGiB,KADE;AAELF,QAAAA,WAAW,EAAEG,MAAM,CAACE;AAFf,OAAP;;AAIA,SAAKjB,kBAAL;AACA,aAAO,EACL,GAAGc,KADE;AAELL,QAAAA,KAAK,EAAEM,MAAM,CAACE;AAFT,OAAP;;AAIA,SAAKd,0BAAL;AACE,aAAO,EACL,GAAGW,KADE;AAELJ,QAAAA,aAAa,EAAEK,MAAM,CAACE;AAFjB,OAAP;;AAIF,SAAKZ,qBAAL;AACE,aAAO,EACL,GAAGS,KADE;AAELH,QAAAA,YAAY,EAAC;AAFR,OAAP;;AAKF,SAAKL,sBAAL;AACE,aAAO,EACL,GAAGQ,KADE;AAELH,QAAAA,YAAY,EAAC;AAFR,OAAP;;AAKF;AACA,aAAOG,KAAP;AA/BJ;AAkCD,CApCH;;AAsCE,eAAeD,WAAf","sourcesContent":["import {\nADD_POST_START ,\n ADD_POST_SUCCESS,\n ADD_POST_FAILURE,\n FETCH_POST_START,\n FETCH_POST_SUCCESS,\n FETCH_POST_FAILURE,\n FETCH_FILTEREDPOST_START,\nFETCH_FILTEREDPOST_SUCCESS,\nFETCH_FILTEREDPOST_FAILURE,\nTOGGLE_SEARCH_TO_TRUE,\nTOGGLE_SEARCH_TO_FALSE\n}from '../actions/postActions';\n\nconst initialState = {\n    addingPost:false,\n    posts: [],\n    filteredPosts:[],\n    searchToggle:false,\n    currentPost:{}\n\n}\n\n\nconst postReducer = (state = initialState, action) => {\n\n    switch (action.type) {\n     \n\n      case  ADD_POST_SUCCESS:\n        return {\n          ...state,\n          currentPost: action.payload\n        };\n        case FETCH_POST_SUCCESS:\n        return {\n          ...state,\n          posts: action.payload\n        };\n        case FETCH_FILTEREDPOST_SUCCESS:\n          return {\n            ...state,\n            filteredPosts: action.payload\n          };\n        case TOGGLE_SEARCH_TO_TRUE:\n          return {\n            ...state,\n            searchToggle:true\n          }\n       \n        case TOGGLE_SEARCH_TO_FALSE:\n          return {\n            ...state,\n            searchToggle:false\n          }\n         \n        default: \n        return state \n    }\n\n  };\n\n  export default postReducer;"]},"metadata":{},"sourceType":"module"}