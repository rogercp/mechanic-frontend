{"ast":null,"code":"import { ADD_POST_START, ADD_POST_SUCCESS, ADD_POST_FAILURE, FETCH_POST_START, FETCH_POST_SUCCESS, FETCH_POST_FAILURE, FETCH_FILTEREDPOST_START, FETCH_FILTEREDPOST_SUCCESS, FETCH_FILTEREDPOST_FAILURE, TOGGLE_SEARCH_TO_TRUE, TOGGLE_SEARCH_TO_FALSE, CHANGE_ORDER_POSTS, UPDATE_PAGE_NUMBER // CURRENT_PAGE_FOR_ORDERED_POSTS,\n, CURRENT_TERM_FOR_FILTER } from '../actions/postActions';\nconst initialState = {\n  addingPost: false,\n  posts: [],\n  filteredPosts: [],\n  // state to keep track of the search bar and if its in use\n  searchToggle: false,\n  currentPost: {},\n  order: null,\n  currentpage: 1,\n  // currentpageForOrderedPosts:1,\n  currentTermForFilter: null\n};\n\nconst postReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST_SUCCESS:\n      return { ...state,\n        currentPost: action.payload\n      };\n\n    case FETCH_POST_SUCCESS:\n      return { ...state,\n        posts: action.payload\n      };\n\n    case CHANGE_ORDER_POSTS:\n      return { ...state,\n        order: action.payload\n      };\n\n    case FETCH_FILTEREDPOST_SUCCESS:\n      return { ...state,\n        filteredPosts: action.payload\n      };\n\n    case TOGGLE_SEARCH_TO_TRUE:\n      return { ...state,\n        searchToggle: true\n      };\n\n    case TOGGLE_SEARCH_TO_FALSE:\n      return { ...state,\n        searchToggle: false\n      };\n\n    case UPDATE_PAGE_NUMBER:\n      return { ...state,\n        currentpage: action.payload\n      };\n    // case CURRENT_PAGE_FOR_ORDERED_POSTS:\n    //     return {\n    //       ...state,\n    //       currentpageForOrderedPosts: action.payload\n    //     }\n\n    case CURRENT_TERM_FOR_FILTER:\n      return { ...state,\n        currentTermForFilter: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default postReducer;","map":{"version":3,"sources":["/Users/roger/Projects/mechanic-frontend/client/src/store/reducers/postReducer.js"],"names":["ADD_POST_START","ADD_POST_SUCCESS","ADD_POST_FAILURE","FETCH_POST_START","FETCH_POST_SUCCESS","FETCH_POST_FAILURE","FETCH_FILTEREDPOST_START","FETCH_FILTEREDPOST_SUCCESS","FETCH_FILTEREDPOST_FAILURE","TOGGLE_SEARCH_TO_TRUE","TOGGLE_SEARCH_TO_FALSE","CHANGE_ORDER_POSTS","UPDATE_PAGE_NUMBER","CURRENT_TERM_FOR_FILTER","initialState","addingPost","posts","filteredPosts","searchToggle","currentPost","order","currentpage","currentTermForFilter","postReducer","state","action","type","payload"],"mappings":"AAAA,SACEA,cADF,EAEEC,gBAFF,EAGEC,gBAHF,EAIEC,gBAJF,EAKEC,kBALF,EAMEC,kBANF,EAOEC,wBAPF,EAQEC,0BARF,EASEC,0BATF,EAUEC,qBAVF,EAWEC,sBAXF,EAYEC,kBAZF,EAaEC,kBAbF,CAcE;AAdF,EAeAC,uBAfA,QAiBO,wBAjBP;AAmBA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,UAAU,EAAE,KADO;AAEnBC,EAAAA,KAAK,EAAE,EAFY;AAGnBC,EAAAA,aAAa,EAAE,EAHI;AAInB;AACAC,EAAAA,YAAY,EAAE,KALK;AAMnBC,EAAAA,WAAW,EAAE,EANM;AAOnBC,EAAAA,KAAK,EAAE,IAPY;AAQnBC,EAAAA,WAAW,EAAG,CARK;AASnB;AACAC,EAAAA,oBAAoB,EAAC;AAVF,CAArB;;AAcA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGV,YAAT,EAAuBW,MAAvB,KAAkC;AAEpD,UAAQA,MAAM,CAACC,IAAf;AAGE,SAAKzB,gBAAL;AACE,aAAO,EACL,GAAGuB,KADE;AAELL,QAAAA,WAAW,EAAEM,MAAM,CAACE;AAFf,OAAP;;AAIF,SAAKvB,kBAAL;AACE,aAAO,EACL,GAAGoB,KADE;AAELR,QAAAA,KAAK,EAAES,MAAM,CAACE;AAFT,OAAP;;AAIF,SAAKhB,kBAAL;AACE,aAAO,EACL,GAAGa,KADE;AAELJ,QAAAA,KAAK,EAAEK,MAAM,CAACE;AAFT,OAAP;;AAIF,SAAKpB,0BAAL;AACE,aAAO,EACL,GAAGiB,KADE;AAELP,QAAAA,aAAa,EAAEQ,MAAM,CAACE;AAFjB,OAAP;;AAIF,SAAKlB,qBAAL;AACE,aAAO,EACL,GAAGe,KADE;AAELN,QAAAA,YAAY,EAAE;AAFT,OAAP;;AAKF,SAAKR,sBAAL;AACE,aAAO,EACL,GAAGc,KADE;AAELN,QAAAA,YAAY,EAAE;AAFT,OAAP;;AAIA,SAAKN,kBAAL;AACA,aAAO,EACL,GAAGY,KADE;AAELH,QAAAA,WAAW,EAAEI,MAAM,CAACE;AAFf,OAAP;AAKJ;AACA;AACA;AACA;AACA;;AAEF,SAAKd,uBAAL;AACM,aAAO,EACL,GAAGW,KADE;AAELF,QAAAA,oBAAoB,EAAEG,MAAM,CAACE;AAFxB,OAAP;;AAKF;AACE,aAAOH,KAAP;AArDJ;AAwDD,CA1DD;;AA4DA,eAAeD,WAAf","sourcesContent":["import {\n  ADD_POST_START,\n  ADD_POST_SUCCESS,\n  ADD_POST_FAILURE,\n  FETCH_POST_START,\n  FETCH_POST_SUCCESS,\n  FETCH_POST_FAILURE,\n  FETCH_FILTEREDPOST_START,\n  FETCH_FILTEREDPOST_SUCCESS,\n  FETCH_FILTEREDPOST_FAILURE,\n  TOGGLE_SEARCH_TO_TRUE,\n  TOGGLE_SEARCH_TO_FALSE,\n  CHANGE_ORDER_POSTS,\n  UPDATE_PAGE_NUMBER,\n  // CURRENT_PAGE_FOR_ORDERED_POSTS,\nCURRENT_TERM_FOR_FILTER,\n\n} from '../actions/postActions';\n\nconst initialState = {\n  addingPost: false,\n  posts: [],\n  filteredPosts: [],\n  // state to keep track of the search bar and if its in use\n  searchToggle: false,\n  currentPost: {},\n  order: null,\n  currentpage : 1,\n  // currentpageForOrderedPosts:1,\n  currentTermForFilter:null\n}\n\n\nconst postReducer = (state = initialState, action) => {\n\n  switch (action.type) {\n\n\n    case ADD_POST_SUCCESS:\n      return {\n        ...state,\n        currentPost: action.payload\n      };\n    case FETCH_POST_SUCCESS:\n      return {\n        ...state,\n        posts: action.payload\n      };\n    case CHANGE_ORDER_POSTS:\n      return {\n        ...state,\n        order: action.payload\n      };\n    case FETCH_FILTEREDPOST_SUCCESS:\n      return {\n        ...state,\n        filteredPosts: action.payload\n      };\n    case TOGGLE_SEARCH_TO_TRUE:\n      return {\n        ...state,\n        searchToggle: true\n      };\n\n    case TOGGLE_SEARCH_TO_FALSE:\n      return {\n        ...state,\n        searchToggle: false\n      };\n      case UPDATE_PAGE_NUMBER:\n      return {\n        ...state,\n        currentpage: action.payload\n      };\n  \n  // case CURRENT_PAGE_FOR_ORDERED_POSTS:\n  //     return {\n  //       ...state,\n  //       currentpageForOrderedPosts: action.payload\n  //     }\n\ncase CURRENT_TERM_FOR_FILTER:\n      return {\n        ...state,\n        currentTermForFilter: action.payload\n      };\n\n    default:\n      return state\n  }\n\n};\n\nexport default postReducer;"]},"metadata":{},"sourceType":"module"}