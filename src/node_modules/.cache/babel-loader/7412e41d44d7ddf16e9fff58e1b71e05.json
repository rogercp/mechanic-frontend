{"ast":null,"code":"import _slicedToArray from \"/Users/roger/Projects/mechanic-frontend/mechanic/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/roger/Projects/mechanic-frontend/mechanic/src/components/CarImgUpload.js\";\n\n/**\n * Dependencies\n */\nimport React, { useEffect, useState } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport { imagesRef } from '../helpers/firebase';\nimport axiosWithAuth from '../helpers/axiosWithAuth';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport CarImgShow from './CarImgShow';\nconst useStyles = makeStyles(theme => ({\n  button: {\n    margin: theme.spacing(1)\n  }\n}));\n/**\n * Define component\n */\n\nfunction CarImgUpload(props) {\n  const classes = useStyles();\n\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        images = _useState2[0],\n        setImages = _useState2[1];\n\n  const _useState3 = useState({}),\n        _useState4 = _slicedToArray(_useState3, 2),\n        file = _useState4[0],\n        setFile = _useState4[1];\n\n  useEffect(() => {\n    fetchDocuments();\n  }, [file]);\n\n  async function fetchDocuments() {\n    let images = await axiosWithAuth().get(\"/cars/\".concat(props.car.id, \"/images\"));\n    setImages(images.data);\n    return images;\n  }\n\n  function handleInputChanges(e) {\n    e.preventDefault();\n    const file = e.target.files[0];\n\n    if (!file) {\n      return;\n    }\n\n    if (file && file.size > 1e8) {\n      alert(\"File is too large. Maximum limit is 100MB.\");\n      e.target.value = '';\n    } else {\n      setFile(file);\n    }\n  }\n\n  function handleSubmitUploader(e) {\n    e.preventDefault();\n    console.log(props.car.id, \"carid\"); // Create file ref (Example: /documents/:car_id/:file_name)\n\n    const fileRef = imagesRef.child(\"\".concat(props.car.id, \"/\").concat(file.name)); // Upload file\n\n    fileRef.put(file).then(snapshot => {\n      console.log('Upload success!', snapshot.constructor, snapshot);\n      axiosWithAuth().post(\"/cars/\".concat(props.car.id, \"/images\"), {\n        file_name: file.name\n      }).then(res => {\n        console.log(\"success\");\n        window.location.reload();\n      }).catch(error => {\n        console.error(error);\n      });\n    });\n  }\n\n  if (images.length >= 0) {\n    return React.createElement(React.Fragment, null, React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, images.map((image, index) => {\n      return React.createElement(CarImgShow, {\n        key: index,\n        car: props.car,\n        image: image,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      });\n    })), React.createElement(\"div\", {\n      id: \"div-pdf\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      id: \"reg-image\",\n      height: \"200px\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }));\n  } else {\n    return React.createElement(React.Fragment, null, React.createElement(\"form\", {\n      onSubmit: handleSubmitUploader,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      required: true,\n      id: \"uploader\",\n      type: \"file\",\n      accept: \"image/*,.pdf,.doc\",\n      onChange: handleInputChanges,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }), React.createElement(Button, {\n      variant: \"contained\",\n      name: \"car_type\",\n      color: \"default\",\n      className: classes.button,\n      startIcon: React.createElement(CloudUploadIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }),\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, \"Upload\")));\n  }\n}\n/**\n *  Export component\n */\n\n\nexport default CarImgUpload;","map":{"version":3,"sources":["/Users/roger/Projects/mechanic-frontend/mechanic/src/components/CarImgUpload.js"],"names":["React","useEffect","useState","Typography","imagesRef","axiosWithAuth","Button","makeStyles","CloudUploadIcon","CarImgShow","useStyles","theme","button","margin","spacing","CarImgUpload","props","classes","images","setImages","file","setFile","fetchDocuments","get","car","id","data","handleInputChanges","e","preventDefault","target","files","size","alert","value","handleSubmitUploader","console","log","fileRef","child","name","put","then","snapshot","constructor","post","file_name","res","window","location","reload","catch","error","length","map","image","index"],"mappings":"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","sourcesContent":["/**\n * Dependencies\n */\n\nimport React, { useEffect, useState } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport { imagesRef } from '../helpers/firebase';\nimport axiosWithAuth from '../helpers/axiosWithAuth';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport CarImgShow from './CarImgShow';\n\n\nconst useStyles = makeStyles(theme => ({\n    button: {\n      margin: theme.spacing(1),\n    },\n  }));\n/**\n * Define component\n */\n\nfunction CarImgUpload(props) {\n\n    const classes = useStyles();\n    const [images, setImages] = useState([]);\n    const [file, setFile] = useState({});\n\n\n\n\n    useEffect(() => {\n        fetchDocuments();\n    },[file]);\n\n    async function fetchDocuments() {\n        let images = await axiosWithAuth().get(`/cars/${props.car.id}/images`)\n        setImages(images.data);\n        return images;\n    }\n\n    function handleInputChanges(e) {\n        e.preventDefault();\n        const file = e.target.files[0]\n        if (!file) {\n            return;\n        }\n        if (file && file.size > 1e8) {\n            alert(\"File is too large. Maximum limit is 100MB.\")\n            e.target.value = ''\n        } else {\n            setFile(file);\n        }\n    }\n\n    function handleSubmitUploader(e) {\n        e.preventDefault()\n        console.log(props.car.id,\"carid\")\n\n        // Create file ref (Example: /documents/:car_id/:file_name)\n        const fileRef = imagesRef.child(`${props.car.id}/${file.name}`)\n\n        // Upload file\n        fileRef.put(file).then((snapshot) => {\n            console.log('Upload success!', snapshot.constructor, snapshot);\n            axiosWithAuth().post(`/cars/${props.car.id}/images`, { file_name: file.name })\n                .then(res => {\n                    console.log(\"success\")\n                    window.location.reload();               \n                 })\n                .catch(error => {\n                    console.error(error);\n                })\n        })\n    }\n\n    if(images.length >= 0 ){\n        return (\n        <>\n                <ul>\n                    {images.map((image, index) => {\n                        return <CarImgShow key={index} car={props.car} image={image}/>\n                    })}\n                </ul>\n                <div id=\"div-pdf\"></div>\n                <img id=\"reg-image\" height=\"200px\"></img>\n        </>\n        )\n    }else{\n        return (\n            <>\n\n                <form onSubmit={handleSubmitUploader}>\n                \n                    <input required id=\"uploader\" type=\"file\" accept=\"image/*,.pdf,.doc\" onChange={handleInputChanges}></input>\n                    <Button\n                    variant=\"contained\"\n                    name=\"car_type\"\n                    color=\"default\"\n                    className={classes.button}\n                    startIcon={<CloudUploadIcon />}\n                    type =\"submit\"\n                    >\n                    Upload\n                </Button>\n                </form>\n                \n            </>\n        )\n    }\n   \n        \n    \n}\n\n/**\n *  Export component\n */\n\nexport default CarImgUpload;\n"]},"metadata":{},"sourceType":"module"}