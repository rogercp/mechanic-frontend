{"ast":null,"code":"import { ADD_POST_START, ADD_POST_SUCCESS, ADD_POST_FAILURE, FETCH_POST_START, FETCH_POST_SUCCESS, FETCH_POST_FAILURE, FETCH_FILTEREDPOST_START, FETCH_FILTEREDPOST_SUCCESS, FETCH_FILTEREDPOST_FAILURE, TOGGLE_SEARCH_TO_TRUE, TOGGLE_SEARCH_TO_FALSE } from '../actions/postActions';\nconst initialState = {\n  addingPost: false,\n  posts: [],\n  filteredPosts: {},\n  searchToggle: false,\n  currentPost: {}\n};\n\nconst postReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST_SUCCESS:\n      return { ...state,\n        currentPost: action.payload\n      };\n\n    case FETCH_POST_SUCCESS:\n      return { ...state,\n        posts: action.payload\n      };\n\n    case FETCH_FILTEREDPOST_SUCCESS:\n      return { ...state,\n        filteredPosts: action.payload\n      };\n\n    case TOGGLE_SEARCH_TO_TRUE:\n      return { ...state,\n        searchToggle: true\n      };\n\n    case TOGGLE_SEARCH_TO_FALSE:\n      return { ...state,\n        searchToggle: false\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default postReducer;","map":{"version":3,"sources":["/Users/roger/Projects/mechanic-frontend/client/src/store/reducers/postReducer.js"],"names":["ADD_POST_START","ADD_POST_SUCCESS","ADD_POST_FAILURE","FETCH_POST_START","FETCH_POST_SUCCESS","FETCH_POST_FAILURE","FETCH_FILTEREDPOST_START","FETCH_FILTEREDPOST_SUCCESS","FETCH_FILTEREDPOST_FAILURE","TOGGLE_SEARCH_TO_TRUE","TOGGLE_SEARCH_TO_FALSE","initialState","addingPost","posts","filteredPosts","searchToggle","currentPost","postReducer","state","action","type","payload"],"mappings":"AAAA,SACEA,cADF,EAEEC,gBAFF,EAGEC,gBAHF,EAIEC,gBAJF,EAKEC,kBALF,EAMEC,kBANF,EAOEC,wBAPF,EAQEC,0BARF,EASEC,0BATF,EAUEC,qBAVF,EAWEC,sBAXF,QAYO,wBAZP;AAcA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,UAAU,EAAE,KADO;AAEnBC,EAAAA,KAAK,EAAE,EAFY;AAGnBC,EAAAA,aAAa,EAAE,EAHI;AAInBC,EAAAA,YAAY,EAAE,KAJK;AAKnBC,EAAAA,WAAW,EAAE;AALM,CAArB;;AAUA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGP,YAAT,EAAuBQ,MAAvB,KAAkC;AAEpD,UAAQA,MAAM,CAACC,IAAf;AAGE,SAAKnB,gBAAL;AACE,aAAO,EACL,GAAGiB,KADE;AAELF,QAAAA,WAAW,EAAEG,MAAM,CAACE;AAFf,OAAP;;AAIF,SAAKjB,kBAAL;AACE,aAAO,EACL,GAAGc,KADE;AAELL,QAAAA,KAAK,EAAEM,MAAM,CAACE;AAFT,OAAP;;AAIF,SAAKd,0BAAL;AACE,aAAO,EACL,GAAGW,KADE;AAELJ,QAAAA,aAAa,EAAEK,MAAM,CAACE;AAFjB,OAAP;;AAIF,SAAKZ,qBAAL;AACE,aAAO,EACL,GAAGS,KADE;AAELH,QAAAA,YAAY,EAAE;AAFT,OAAP;;AAKF,SAAKL,sBAAL;AACE,aAAO,EACL,GAAGQ,KADE;AAELH,QAAAA,YAAY,EAAE;AAFT,OAAP;;AAKF;AACE,aAAOG,KAAP;AA/BJ;AAkCD,CApCD;;AAsCA,eAAeD,WAAf","sourcesContent":["import {\n  ADD_POST_START,\n  ADD_POST_SUCCESS,\n  ADD_POST_FAILURE,\n  FETCH_POST_START,\n  FETCH_POST_SUCCESS,\n  FETCH_POST_FAILURE,\n  FETCH_FILTEREDPOST_START,\n  FETCH_FILTEREDPOST_SUCCESS,\n  FETCH_FILTEREDPOST_FAILURE,\n  TOGGLE_SEARCH_TO_TRUE,\n  TOGGLE_SEARCH_TO_FALSE\n} from '../actions/postActions';\n\nconst initialState = {\n  addingPost: false,\n  posts: [],\n  filteredPosts: {},\n  searchToggle: false,\n  currentPost: {}\n\n}\n\n\nconst postReducer = (state = initialState, action) => {\n\n  switch (action.type) {\n\n\n    case ADD_POST_SUCCESS:\n      return {\n        ...state,\n        currentPost: action.payload\n      };\n    case FETCH_POST_SUCCESS:\n      return {\n        ...state,\n        posts: action.payload\n      };\n    case FETCH_FILTEREDPOST_SUCCESS:\n      return {\n        ...state,\n        filteredPosts: action.payload\n      };\n    case TOGGLE_SEARCH_TO_TRUE:\n      return {\n        ...state,\n        searchToggle: true\n      }\n\n    case TOGGLE_SEARCH_TO_FALSE:\n      return {\n        ...state,\n        searchToggle: false\n      }\n\n    default:\n      return state\n  }\n\n};\n\nexport default postReducer;"]},"metadata":{},"sourceType":"module"}