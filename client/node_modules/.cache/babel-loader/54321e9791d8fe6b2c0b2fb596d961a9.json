{"ast":null,"code":"var _jsxFileName = \"/Users/roger/Projects/mechanic-frontend/client/src/components/Pagination.js\";\nimport React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { id } from 'date-fns/esm/locale';\nimport { Button } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { updatePageNumber } from \"../store/actions/postActions\";\n\nfunction Pagination(props) {\n  const [numberOfPages, setNumberOfPages] = useState();\n  const [pagesWindow, setPagesWindow] = useState([0, 0, 1, 2, 3]);\n  const [currentpage, setCurrentPage] = useState(props.currentpage);\n  useEffect(() => {\n    setNumberOfPages(props.numPages);\n    if (props.order) setCurrentPage(1);\n  }, [props.orderPosts]);\n  console.log(props.currentPage);\n\n  const goForward = () => {\n    let lastNum = pagesWindow[pagesWindow.length - 1];\n    let newLastNum = lastNum + 1;\n    setPagesWindow(prevState => pagesWindow.slice(1));\n    setPagesWindow(prevState => prevState.concat([newLastNum]));\n    setCurrentPage(currentpage + 1);\n    props.updatePageNumber(currentpage + 1);\n    window.scrollTo(0, 0);\n  };\n\n  const goBack = () => {\n    let firstNum = pagesWindow[0];\n    let newfirstNum = [firstNum - 1];\n    setPagesWindow(prevState => pagesWindow.slice(0, -1));\n    setPagesWindow(prevState => newfirstNum.concat(prevState));\n    setCurrentPage(currentpage - 1);\n    props.updatePageNumber(currentpage - 1);\n    window.scrollTo(0, 0);\n  };\n\n  const onClickNumber = num => {\n    setCurrentPage(num);\n    props.updatePageNumber(num);\n    const indexOfInComing = pagesWindow.indexOf(num);\n\n    if (indexOfInComing > 2) {\n      let lastNum = pagesWindow[pagesWindow.length - 1];\n      let newLastNum = lastNum + 1;\n      setPagesWindow(prevState => pagesWindow.slice(1));\n      setPagesWindow(prevState => prevState.concat([newLastNum]));\n    } else if (indexOfInComing < 2) {\n      let firstNum = pagesWindow[0];\n      let newfirstNum = [firstNum - 1];\n      setPagesWindow(prevState => pagesWindow.slice(0, -1));\n      setPagesWindow(prevState => newfirstNum.concat(prevState));\n    }\n\n    window.scrollTo(0, 0);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: \"100%\",\n      display: \"flex\",\n      flexDirection: \"row\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      marginBottom: \"15.65px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }\n  }, currentpage >= 2 ? /*#__PURE__*/React.createElement(Button, {\n    variant: \"dark\",\n    onClick: goBack,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 12\n    }\n  }, \"prev\") : null), pagesWindow.map(pageNumber => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 13\n      }\n    }, (() => {\n      if (pageNumber === 0 || pageNumber < 0) {\n        return null;\n      } else if (currentpage === pageNumber) {\n        return /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 20\n          }\n        }, /*#__PURE__*/React.createElement(Button, {\n          variant: \"primary\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 23\n          }\n        }, pageNumber));\n      } else if (pageNumber > 0 && pageNumber === numberOfPages || pageNumber < numberOfPages) return /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"secondary\",\n        onClick: () => onClickNumber(pageNumber),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 22\n        }\n      }, pageNumber));\n    })());\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 9\n    }\n  }, currentpage < numberOfPages ? /*#__PURE__*/React.createElement(Button, {\n    variant: \"dark\",\n    onClick: goForward,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 11\n    }\n  }, \"next\") : null)));\n}\n\n;\n\nconst mapStateToProps = state => ({\n  orderPosts: state.post.order,\n  currentpage: state.post.currentpage\n});\n\nexport default connect(mapStateToProps, {\n  updatePageNumber\n})(Pagination);","map":{"version":3,"sources":["/Users/roger/Projects/mechanic-frontend/client/src/components/Pagination.js"],"names":["React","useEffect","useState","makeStyles","id","Button","connect","updatePageNumber","Pagination","props","numberOfPages","setNumberOfPages","pagesWindow","setPagesWindow","currentpage","setCurrentPage","numPages","order","orderPosts","console","log","currentPage","goForward","lastNum","length","newLastNum","prevState","slice","concat","window","scrollTo","goBack","firstNum","newfirstNum","onClickNumber","num","indexOfInComing","indexOf","width","display","flexDirection","justifyContent","alignItems","marginBottom","map","pageNumber","mapStateToProps","state","post"],"mappings":"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","sourcesContent":["\nimport React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { id } from 'date-fns/esm/locale';\nimport { Button  } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { updatePageNumber } from \"../store/actions/postActions\";\n\n\nfunction Pagination(props) {\n\n  const [numberOfPages, setNumberOfPages] = useState()\n\n  const [pagesWindow, setPagesWindow] = useState(\n    [0, 0, 1, 2, 3]\n  )\n\n  const [currentpage, setCurrentPage] = useState(props.currentpage)\n\n\n  useEffect(() => {\n\n    setNumberOfPages(props.numPages)\n\n      if(props.order)\n    setCurrentPage(1)\n  },[props.orderPosts])\n\nconsole.log(props.currentPage)\n  const  goForward = (() => {\n\n    let lastNum = pagesWindow[pagesWindow.length-1]\n    let newLastNum = lastNum + 1\n\n    setPagesWindow(\n      prevState => (  pagesWindow.slice(1))\n    )\n    setPagesWindow(\n      prevState => (  prevState.concat([newLastNum]))\n    )\n   \n    setCurrentPage(currentpage + 1)\n    props.updatePageNumber(currentpage + 1)\n\n    window.scrollTo(0, 0);\n  })\n\n\n  const goBack = (() => {\n\n    let firstNum = pagesWindow[0]\n    let newfirstNum = [firstNum - 1]\n\n    setPagesWindow(\n      prevState => ( pagesWindow.slice(0,-1))\n    )\n\n    setPagesWindow(\n      prevState => (  newfirstNum.concat(prevState))\n    )\n   \n    setCurrentPage(currentpage - 1)\n    props.updatePageNumber(currentpage - 1)\n    window.scrollTo(0, 0);\n  })\n\n  const onClickNumber=((num)=>{\n\n    setCurrentPage(num)\n    props.updatePageNumber(num)\n    const indexOfInComing = pagesWindow.indexOf(num)\n\n    if(indexOfInComing >2){\n\n      let lastNum = pagesWindow[pagesWindow.length-1]\n      let newLastNum = lastNum + 1\n  \n      setPagesWindow(\n        prevState => (  pagesWindow.slice(1))\n      )\n      setPagesWindow(\n        prevState => (  prevState.concat([newLastNum]))\n      )\n     \n\n    }\n    else if(indexOfInComing <2){\n\n      let firstNum = pagesWindow[0]\n    let newfirstNum = [firstNum - 1]\n\n    setPagesWindow(\n      prevState => ( pagesWindow.slice(0,-1))\n    )\n\n    setPagesWindow(\n      prevState => (  newfirstNum.concat(prevState))\n    )\n      \n    }\n    window.scrollTo(0, 0);\n\n  })\n\n\n\n  return (\n    <>\n\n      <div style={{ width: \"100%\", display: \"flex\", flexDirection: \"row\", justifyContent: \"center\", alignItems: \"center\", marginBottom: \"15.65px\" }}>\n        <div>\n          {  currentpage >= 2 ?\n           <Button variant=\"dark\" onClick={goBack}>prev</Button>\n            :\n            null\n          }\n          \n        </div>\n\n        {pagesWindow.map((pageNumber) => {\n          return (\n            <div>\n             {\n               (()=>{\n                if(pageNumber === 0 || pageNumber < 0){\n                  return (\n                      null\n                  )\n                }else if(currentpage === pageNumber ){\n                  return (\n                   <span>  \n                      <Button  variant=\"primary\" >{pageNumber}</Button> \n                     </span>\n                  )\n                }else if(pageNumber > 0 && pageNumber === numberOfPages || pageNumber < numberOfPages )\n                return(\n                  <span>               \n                     <Button variant=\"secondary\" onClick={()=>onClickNumber(pageNumber)}>{pageNumber}</Button>\n                  </span>\n                )\n             })()\n              \n             }                      \n            </div>\n          )\n\n        })\n\n\n        }\n\n        <div>\n          { currentpage < numberOfPages ?\n          <Button variant=\"dark\" onClick={goForward}>next</Button>\n            :null\n          }\n          \n\n        </div>\n      </div>\n    </>\n  );\n};\n\n\n\nconst mapStateToProps = state => ({\n  orderPosts: state.post.order,\n  currentpage : state.post.currentpage\n});\nexport default connect(\n  mapStateToProps,\n  { updatePageNumber }\n)(Pagination);\n"]},"metadata":{},"sourceType":"module"}