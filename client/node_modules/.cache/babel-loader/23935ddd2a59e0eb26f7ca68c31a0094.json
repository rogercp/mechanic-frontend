{"ast":null,"code":"import _slicedToArray from \"/Users/roger/Projects/mechanic-frontend/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/roger/Projects/mechanic-frontend/client/src/components/Posts.js\";\nimport React, { useState, useEffect } from \"react\";\nimport DashSideNav from './DashSideNav';\nimport { axiosWithAuth } from '../helpers/index';\nimport IndividualPost from './IndividualPost';\nimport { connect } from 'react-redux';\nimport { fetchPosts } from \"../store/actions/postActions\";\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport search from './Search';\nimport Search from \"./Search\";\n\nfunction Posts(props) {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        searchPosts = _useState2[0],\n        setsearchPosts = _useState2[1];\n\n  async function searchPostsHandler(term) {\n    axiosWithAuth().post('/post/search', {\n      searchTerm: term\n    }).then(res => {\n      console.log(searchPosts);\n      setsearchPosts(res.data);\n    }).catch(err => {});\n  }\n\n  ;\n  useEffect(() => {\n    props.fetchPosts();\n  }, []);\n\n  if (props.filteredPosts.length > 0) {\n    return React.createElement(React.Fragment, null, React.createElement(Search, {\n      searchPostsHandler: searchPostsHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, searchPosts.length > 0 ? searchPosts.map(p => {\n      return React.createElement(React.Fragment, null, React.createElement(IndividualPost, {\n        post: p,\n        key: caches.uid,\n        fetchPosts: props.fetchPosts,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }));\n    }) : props.filteredPosts.map(p => {\n      return React.createElement(React.Fragment, null, React.createElement(IndividualPost, {\n        post: p,\n        key: caches.uid,\n        fetchPosts: props.fetchPosts,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }));\n    }), React.createElement(ExpandMoreIcon, {\n      style: {\n        fontSize: \"100px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    })));\n  } else {\n    return React.createElement(React.Fragment, null, React.createElement(Search, {\n      searchPostsHandler: searchPostsHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, searchPosts.length > 0 ? searchPosts.map(p => {\n      return React.createElement(React.Fragment, null, React.createElement(IndividualPost, {\n        post: p,\n        key: caches.uid,\n        fetchPosts: props.fetchPosts,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }));\n    }) : props.myposts.map(p => {\n      return React.createElement(React.Fragment, null, React.createElement(IndividualPost, {\n        post: p,\n        key: caches.uid,\n        fetchPosts: props.fetchPosts,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }));\n    }), React.createElement(ExpandMoreIcon, {\n      style: {\n        fontSize: \"100px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    })));\n  }\n}\n\n;\n\nconst mapStateToProps = state => ({\n  myposts: state.post.posts,\n  filteredPosts: state.post.filteredPosts\n});\n\nexport default connect(mapStateToProps, {\n  fetchPosts\n})(Posts);","map":{"version":3,"sources":["/Users/roger/Projects/mechanic-frontend/client/src/components/Posts.js"],"names":["React","useState","useEffect","DashSideNav","axiosWithAuth","IndividualPost","connect","fetchPosts","ExpandMoreIcon","search","Search","Posts","props","searchPosts","setsearchPosts","searchPostsHandler","term","post","searchTerm","then","res","console","log","data","catch","err","filteredPosts","length","display","flexDirection","alignItems","map","p","caches","uid","fontSize","myposts","mapStateToProps","state","posts"],"mappings":"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","sourcesContent":["\n\nimport React, { useState, useEffect} from \"react\";\nimport DashSideNav from './DashSideNav';\nimport { axiosWithAuth } from '../helpers/index';\nimport IndividualPost from './IndividualPost'\nimport { connect } from 'react-redux';\nimport { fetchPosts } from \"../store/actions/postActions\";\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport search from './Search';\nimport Search from \"./Search\";\n\n\n\n\nfunction Posts(props) {\n  \nconst [searchPosts,setsearchPosts] = useState([])\n\n\n  async function searchPostsHandler (term) {\n    \n    axiosWithAuth()\n        .post('/post/search', {searchTerm:term})\n        .then(res => {  \n          console.log(searchPosts)\n          setsearchPosts(res.data)\n        })\n        .catch(err => {      \n        });\n  };\n  \n\n    useEffect(() => {\n      props.fetchPosts()\n      \n    }, []);\n\nif(props.filteredPosts.length >0){\n\n  return (\n\n    <>\n\n    <Search  searchPostsHandler={searchPostsHandler} />\n\n  <div style={{display:\"flex\", flexDirection:\"column\",alignItems:\"center\"}}>\n    \n    \n      {searchPosts.length>0 ?\n\n        searchPosts.map(p => {\n        return (\n            <>\n            <IndividualPost   post={p}  key={caches.uid} fetchPosts={props.fetchPosts} />\n            </>\n        );\n    })\n      \n      :\n      \n    \n    props.filteredPosts.map(p => {\n        return (\n            <>\n            <IndividualPost   post={p}  key={caches.uid} fetchPosts={props.fetchPosts} />\n            </>\n        );\n    })\n  \n\n    }\n    \n    \n     <ExpandMoreIcon style={{fontSize:\"100px\"}} />\n\n    </div> \n  </>\n\n  )\n}else{\n\n  return (\n    <>\n\n      <Search  searchPostsHandler={searchPostsHandler} />\n\n    <div style={{display:\"flex\", flexDirection:\"column\",alignItems:\"center\"}}>\n      \n      {searchPosts.length>0 ?\n\n        searchPosts.map(p => {\n        return (\n            <>\n            <IndividualPost   post={p}  key={caches.uid} fetchPosts={props.fetchPosts} />\n            </>\n        );\n    })\n      \n      :\n      \n      props.myposts.map(p => {\n          return (\n              <>\n              <IndividualPost   post={p}  key={caches.uid} fetchPosts={props.fetchPosts} />\n              </>\n          );\n      })\n\n      }\n      \n      \n       <ExpandMoreIcon style={{fontSize:\"100px\"}} />\n\n      </div> \n    </>\n  );\n}\n\n  \n};\n\n\nconst mapStateToProps = state => ({\n  myposts: state.post.posts,\n  filteredPosts:state.post.filteredPosts\n});\nexport default connect(\n  mapStateToProps,\n  {fetchPosts}\n)(Posts);\n"]},"metadata":{},"sourceType":"module"}