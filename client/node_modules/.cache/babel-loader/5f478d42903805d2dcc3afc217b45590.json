{"ast":null,"code":"import _slicedToArray from \"/Users/roger/Projects/mechanic-frontend/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/roger/Projects/mechanic-frontend/client/src/components/ProfileImageShow.js\";\nimport React, { useEffect, useState } from 'react';\nimport { imagesRef } from '../helpers/firebase';\nimport { Image } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { fetchProfileImage } from \"../store/actions/settingsActions\";\n\nfunction ProfileImageShow(props) {\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        thisImage = _useState2[0],\n        setThisimage = _useState2[1]; // const [imagine,setImagine] = useState()\n\n\n  const userId = localStorage.getItem('id');\n  console.log(props.userImage, \"image\"); // useEffect(() => {\n  //   props.fetchProfileImage(userId)\n  //   if(props.userImage){\n  //     console.log(props.userImage,\"img\")\n  //     const fileRef = imagesRef.child(`${userId}/${props.userImage.file_name}`);\n  // function getImg() {\n  //   fileRef.getMetadata().then((metadata) => {\n  //     fileRef.getDownloadURL().then(url => {\n  //       setThisimage(url)\n  //       // let img = document.getElementById('document-image');\n  //       // if (metadata.contentType === 'application/pdf') {\n  //       //     img.src = '';\n  //       //     // TODO handle PDFs\n  //       //   } else {\n  //       //     img.src = url;\n  //       //   }\n  //     })\n  //     .catch(err => {\n  //       console.error(err);\n  //     })\n  //   }).catch((err) => {\n  //     console.error(err);\n  //   });\n  // }\n  // } \n  // }, []);\n\n  const fileRef = imagesRef.child(\"\".concat(userId, \"/\").concat(props.userImage ? props.userImage.file_name : \"0\"));\n  useEffect(() => {\n    props.fetchProfileImage(userId); //  setImagine(props.userImage.file_name)\n\n    getImg();\n  }, []);\n\n  function getImg() {\n    fileRef.getMetadata().then(metadata => {\n      fileRef.getDownloadURL().then(url => {\n        setThisimage(url); // let img = document.getElementById('document-image');\n        // if (metadata.contentType === 'application/pdf') {\n        //     img.src = '';\n        //     // TODO handle PDFs\n        //   } else {\n        //     img.src = url;\n        //   }\n      }).catch(err => {\n        console.error(err);\n      });\n    }).catch(err => {\n      console.error(err);\n    });\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(Image, {\n    src: \"holder.js/171x180\",\n    rounded: true,\n    id: \"reg-image\",\n    style: {\n      height: \"200px\"\n    },\n    src: \"\".concat(thisImage),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }));\n}\n\nconst mapStateToProps = state => ({\n  userImage: state.setting.userImage\n});\n\nexport default connect(mapStateToProps, {\n  fetchProfileImage\n})(ProfileImageShow);","map":{"version":3,"sources":["/Users/roger/Projects/mechanic-frontend/client/src/components/ProfileImageShow.js"],"names":["React","useEffect","useState","imagesRef","Image","connect","fetchProfileImage","ProfileImageShow","props","thisImage","setThisimage","userId","localStorage","getItem","console","log","userImage","fileRef","child","file_name","getImg","getMetadata","then","metadata","getDownloadURL","url","catch","err","error","height","mapStateToProps","state","setting"],"mappings":";;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,KAAT,QAAsB,iBAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,iBAAT,QAAkC,kCAAlC;;AAIA,SAASC,gBAAT,CAA0BC,KAA1B,EAAiC;AAAA,oBAEGN,QAAQ,CAAC,EAAD,CAFX;AAAA;AAAA,QAEtBO,SAFsB;AAAA,QAEZC,YAFY,kBAG7B;;;AAEA,QAAMC,MAAM,GAAGC,YAAY,CAACC,OAAb,CAAqB,IAArB,CAAf;AAEJC,EAAAA,OAAO,CAACC,GAAR,CAAYP,KAAK,CAACQ,SAAlB,EAA4B,OAA5B,EAPiC,CAS7B;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,QAAMC,OAAO,GAAGd,SAAS,CAACe,KAAV,WAAmBP,MAAnB,cAA6BH,KAAK,CAACQ,SAAN,GAAkBR,KAAK,CAACQ,SAAN,CAAgBG,SAAlC,GAA8C,GAA3E,EAAhB;AAEAlB,EAAAA,SAAS,CAAC,MAAM;AACfO,IAAAA,KAAK,CAACF,iBAAN,CAAwBK,MAAxB,EADe,CAEhB;;AACES,IAAAA,MAAM;AAEP,GALQ,EAKP,EALO,CAAT;;AAOA,WAASA,MAAT,GAAkB;AACdH,IAAAA,OAAO,CAACI,WAAR,GAAsBC,IAAtB,CAA4BC,QAAD,IAAc;AACvCN,MAAAA,OAAO,CAACO,cAAR,GAAyBF,IAAzB,CAA8BG,GAAG,IAAI;AAEnCf,QAAAA,YAAY,CAACe,GAAD,CAAZ,CAFmC,CAInC;AACA;AACA;AACA;AACA;AACA;AACA;AACD,OAXD,EAYCC,KAZD,CAYOC,GAAG,IAAI;AACZb,QAAAA,OAAO,CAACc,KAAR,CAAcD,GAAd;AACD,OAdD;AAeD,KAhBD,EAgBGD,KAhBH,CAgBUC,GAAD,IAAS;AAChBb,MAAAA,OAAO,CAACc,KAAR,CAAcD,GAAd;AACD,KAlBD;AAmBD;;AASH,SACI,0CAEI,oBAAC,KAAD;AAAO,IAAA,GAAG,EAAC,mBAAX;AAA+B,IAAA,OAAO,MAAtC;AAAuC,IAAA,EAAE,EAAC,WAA1C;AAAuD,IAAA,KAAK,EAAE;AAACE,MAAAA,MAAM,EAAC;AAAR,KAA9D;AAAgF,IAAA,GAAG,YAAKpB,SAAL,CAAnF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ;AAQH;;AAKD,MAAMqB,eAAe,GAAGC,KAAK,KAAK;AAChCf,EAAAA,SAAS,EAAGe,KAAK,CAACC,OAAN,CAAchB;AADM,CAAL,CAA7B;;AAGA,eAAeX,OAAO,CACpByB,eADoB,EAEpB;AAACxB,EAAAA;AAAD,CAFoB,CAAP,CAGbC,gBAHa,CAAf","sourcesContent":["\n\nimport React, { useEffect, useState } from 'react';\nimport { imagesRef } from '../helpers/firebase';\nimport { Image } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { fetchProfileImage } from \"../store/actions/settingsActions\";\n\n\n\nfunction ProfileImageShow(props) {\n\n    const [thisImage,setThisimage]= useState('')\n    // const [imagine,setImagine] = useState()\n\n    const userId = localStorage.getItem('id');\n\nconsole.log(props.userImage,\"image\")\n\n    // useEffect(() => {\n    //   props.fetchProfileImage(userId)\n    //   if(props.userImage){\n    //     console.log(props.userImage,\"img\")\n\n    //     const fileRef = imagesRef.child(`${userId}/${props.userImage.file_name}`);\n      \n    // function getImg() {\n    //   fileRef.getMetadata().then((metadata) => {\n    //     fileRef.getDownloadURL().then(url => {\n\n    //       setThisimage(url)\n\n    //       // let img = document.getElementById('document-image');\n    //       // if (metadata.contentType === 'application/pdf') {\n    //       //     img.src = '';\n    //       //     // TODO handle PDFs\n    //       //   } else {\n    //       //     img.src = url;\n    //       //   }\n    //     })\n    //     .catch(err => {\n    //       console.error(err);\n    //     })\n    //   }).catch((err) => {\n    //     console.error(err);\n    //   });\n    // }\n    // } \n    // }, []);\n   \n\n    const fileRef = imagesRef.child(`${userId}/${props.userImage ? props.userImage.file_name : \"0\"}`);\n\n    useEffect(() => {\n     props.fetchProfileImage(userId)\n    //  setImagine(props.userImage.file_name)\n      getImg()\n     \n    },[]);\n\n    function getImg() {\n        fileRef.getMetadata().then((metadata) => {\n          fileRef.getDownloadURL().then(url => {\n  \n            setThisimage(url)\n  \n            // let img = document.getElementById('document-image');\n            // if (metadata.contentType === 'application/pdf') {\n            //     img.src = '';\n            //     // TODO handle PDFs\n            //   } else {\n            //     img.src = url;\n            //   }\n          })\n          .catch(err => {\n            console.error(err);\n          })\n        }).catch((err) => {\n          console.error(err);\n        });\n      }\n    \n  \n\n\n\n\n\n\n    return(\n        <>\n            {/* {(metadata.contentType === 'application/pdf')? <div id=\"div-pdf\" src={`${thisImage}`}></div> :  <img id=\"reg-image\" height=\"200px\" src={`${thisImage}`}></img>} */}\n            <Image src=\"holder.js/171x180\" rounded id=\"reg-image\"  style={{height:\"200px\"}} src={`${thisImage}`}/>\n            {/* {props.image.file_name} */}\n\n        </>\n    )\n}\n\n\n\n\nconst mapStateToProps = state => ({\n  userImage : state.setting.userImage\n});\nexport default connect(\n  mapStateToProps,\n  {fetchProfileImage}\n)(ProfileImageShow);\n"]},"metadata":{},"sourceType":"module"}