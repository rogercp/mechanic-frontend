{"ast":null,"code":"var _jsxFileName = \"/Users/roger/Projects/mechanic-frontend/client/src/components/Posts.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { axiosWithAuth } from '../helpers/index';\nimport IndividualPost from './IndividualPost';\nimport { connect } from 'react-redux';\nimport { fetchFilteredPosts } from \"../store/actions/postActions\";\nimport { toggleSearchToTrue } from \"../store/actions/postActions\"; // import { changeOrderPosts } from \"../store/actions/postActions\";\n// import { fetchPosts } from \"../store/actions/postActions\";\n\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Search from \"./Search\";\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/Select';\nimport OrderPosts from './OrderPosts';\nimport axios from 'axios';\n\nfunction Posts(props) {\n  const [searchPosts, setsearchPosts] = useState([]);\n  const [initalLoadPosts, setInitialLoadPosts] = useState(); //  const [orderBy,setOrderBy] = useState({\n  //    order:props.orderPosts\n  //   })\n\n  async function searchPostsHandler(term) {\n    axiosWithAuth().post('/post/search', {\n      searchTerm: term\n    }).then(res => {\n      setsearchPosts(res.data);\n      props.toggleSearchToTrue();\n    }).catch(err => {});\n  }\n\n  ;\n  useEffect(() => {\n    onFirstLoad();\n  }, []); // useEffect(()=>{\n  //   props.fetchFilteredPosts(\"AllPosts\",'date')\n  // },[])\n\n  function onFirstLoad() {\n    axios.post(`${process.env.REACT_APP_API_URL}/post/filterCategory`, {\n      category: 'AllPosts',\n      order: 'date'\n    }).then(res => {\n      console.log(initalLoadresosts.data, \"initalLoadPosts\");\n      setInitialLoadPosts(res.data);\n    }).catch(err => {\n      console.log(err);\n    });\n  } // useEffect(() => {\n  //   props.fetchFilteredPosts(\"AllPosts\",'date')\n  // });\n  // const handleChange = name => event => {\n  //   setOrderBy({\n  //     ...orderBy,\n  //     [name]: event.target.value,\n  //   });\n  // };\n\n\n  console.log(props.orderPosts, \"orderPost\");\n\n  if (props.searchToggle === true) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Search, {\n      searchPostsHandler: searchPostsHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(OrderPosts, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }\n    }, searchPosts.map(p => {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(IndividualPost, {\n        post: p,\n        key: caches.uid,\n        fetchPosts: props.fetchFilteredPosts,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 19\n        }\n      }));\n    })));\n  } else if (props.filteredPosts.length < 1 && props.searchToggle === false) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Search, {\n      searchPostsHandler: searchPostsHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(OrderPosts, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 7\n      }\n    }, initalLoadPosts.map(p => {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(IndividualPost, {\n        post: p,\n        key: caches.uid,\n        fetchPosts: props.fetchFilteredPosts,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 19\n        }\n      }));\n    })));\n  } else {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Search, {\n      searchPostsHandler: searchPostsHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(OrderPosts, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }\n    }, props.filteredPosts.map(p => {\n      console.log(p, \"each post\");\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(IndividualPost, {\n        post: p,\n        fetchPosts: props.fetchFilteredPosts,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 21\n        }\n      }));\n    })));\n  }\n}\n\n;\n\nconst mapStateToProps = state => ({\n  searchToggle: state.post.searchToggle,\n  myposts: state.post.posts,\n  filteredPosts: state.post.filteredPosts,\n  orderPosts: state.post.order\n});\n\nexport default connect(mapStateToProps, {\n  toggleSearchToTrue,\n  fetchFilteredPosts\n})(Posts);","map":{"version":3,"sources":["/Users/roger/Projects/mechanic-frontend/client/src/components/Posts.js"],"names":["React","useState","useEffect","axiosWithAuth","IndividualPost","connect","fetchFilteredPosts","toggleSearchToTrue","ExpandMoreIcon","Search","Select","InputLabel","OrderPosts","axios","Posts","props","searchPosts","setsearchPosts","initalLoadPosts","setInitialLoadPosts","searchPostsHandler","term","post","searchTerm","then","res","data","catch","err","onFirstLoad","process","env","REACT_APP_API_URL","category","order","console","log","initalLoadresosts","orderPosts","searchToggle","display","flexDirection","alignItems","map","p","caches","uid","filteredPosts","length","mapStateToProps","state","myposts","posts"],"mappings":"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","sourcesContent":["\n\nimport React, { useState, useEffect } from \"react\";\nimport { axiosWithAuth } from '../helpers/index';\nimport IndividualPost from './IndividualPost'\nimport { connect } from 'react-redux';\nimport { fetchFilteredPosts } from \"../store/actions/postActions\";\nimport { toggleSearchToTrue } from \"../store/actions/postActions\";\n// import { changeOrderPosts } from \"../store/actions/postActions\";\n// import { fetchPosts } from \"../store/actions/postActions\";\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Search from \"./Search\";\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/Select';\nimport OrderPosts from './OrderPosts'\nimport axios from 'axios';\n\n\n\nfunction Posts(props) {\n\n  const [searchPosts, setsearchPosts] = useState([])\n\n  const [initalLoadPosts, setInitialLoadPosts] = useState()\n  \n//  const [orderBy,setOrderBy] = useState({\n\n//    order:props.orderPosts\n\n//   })\n  \n  async function searchPostsHandler(term) {\n\n    axiosWithAuth()\n      .post('/post/search', { searchTerm: term })\n      .then(res => {\n        setsearchPosts(res.data)\n        props.toggleSearchToTrue()\n      })\n      .catch(err => {\n      });\n  };\n\n\n   useEffect(() => {\n    onFirstLoad()\n  }, []);\n\n\n\n// useEffect(()=>{\n//   props.fetchFilteredPosts(\"AllPosts\",'date')\n// },[])\n\n\n\n  function onFirstLoad(){\n\n     axios\n      .post(`${process.env.REACT_APP_API_URL}/post/filterCategory`, { category: 'AllPosts' , order: 'date' })\n      .then(res => {\n        console.log(initalLoadresosts.data,\"initalLoadPosts\")\n\n        setInitialLoadPosts(res.data)\n\n      })\n      .catch(err => {\n        console.log(err)\n      });\n\n  \n    \n\n  }\n\n  // useEffect(() => {\n  //   props.fetchFilteredPosts(\"AllPosts\",'date')\n  // });\n// const handleChange = name => event => {\n//   setOrderBy({\n//     ...orderBy,\n//     [name]: event.target.value,\n//   });\n\n// };\n\n\n\n  console.log(props.orderPosts,\"orderPost\")\n\n  if (props.searchToggle === true) {\n\n    return (\n\n      <>\n\n        <Search searchPostsHandler={searchPostsHandler} />\n        {/* <Select\n          native\n          name=\"order\"\n          value={orderBy.order}\n          onChange={handleChange('order')}\n          inputProps={{\n            name: 'type',\n            id: 'outlined-type-native-simple',\n          }}\n        >\n          <option value={\"date\"}>date</option>\n          <option value={\"likes\"}>likes</option>\n        \n        </Select> */}\n\n        <OrderPosts/>\n\n\n        <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}>\n\n          {\n\n            searchPosts.map(p => {\n              return (\n                <>\n                  <IndividualPost post={p} key={caches.uid}  fetchPosts={props.fetchFilteredPosts} />\n                </>\n              );\n            })\n\n\n          }\n\n\n\n        </div>\n      </>\n\n    )\n  }\nelse if( props.filteredPosts.length < 1 && props.searchToggle === false){\n\n  return (\n    <>\n\n      <Search searchPostsHandler={searchPostsHandler} />\n\n    \n      <OrderPosts/>\n\n      <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}>\n\n     \n            {initalLoadPosts.map(p => {\n\n              return (\n                <>\n                  <IndividualPost post={p} key={caches.uid}  fetchPosts={props.fetchFilteredPosts} />\n                </>\n              );\n            })}\n        \n\n\n      </div>\n    </>\n  );\n}\n\n  else  {\n    return (\n      <>\n\n        <Search searchPostsHandler={searchPostsHandler} />\n\n        \n        {/* <Select\n          native\n          name=\"order\"\n          value={orderBy.order}\n          onChange={handleChange('order')}\n          inputProps={{\n            name: 'type',\n            id: 'outlined-type-native-simple',\n          }}\n        >\n          <option value={\"date\"}>date</option>\n          <option value={\"likes\"}>likes</option>\n        \n        </Select> */}\n        <OrderPosts/>\n\n        <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}>\n\n       \n              {props.filteredPosts.map(p => {\n                console.log(p, \"each post\")\n                return (\n                  <>\n                    <IndividualPost post={p}  fetchPosts={props.fetchFilteredPosts} />\n                  </>\n                );\n              })}\n          \n  \n\n        </div>\n      </>\n    );\n  }\n  \n\n\n};\n\n\nconst mapStateToProps = state => ({\n  searchToggle: state.post.searchToggle,\n  myposts: state.post.posts,\n  filteredPosts: state.post.filteredPosts,\n  orderPosts: state.post.order\n});\nexport default connect(\n  mapStateToProps,\n  { toggleSearchToTrue, fetchFilteredPosts }\n)(Posts);\n"]},"metadata":{},"sourceType":"module"}