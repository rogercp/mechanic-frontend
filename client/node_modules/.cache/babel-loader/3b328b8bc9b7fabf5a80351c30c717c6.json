{"ast":null,"code":"var _jsxFileName = \"/Users/roger/Projects/mechanic-frontend/client/src/components/PostImageUpload.js\";\nimport React, { useEffect, useState } from 'react';\nimport { imagesRef } from '../helpers/firebase';\nimport axiosWithAuth from '../helpers/axiosWithAuth';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport CarImgShow from './CarImgShow';\nimport CarImageFixShow from './CarImageFixShow';\nimport DriveEtaIcon from '@material-ui/icons/DriveEta';\nimport ImageCarousel from './ImageCarousel';\nimport DescriptionIcon from '@material-ui/icons/Description';\nconst useStyles = makeStyles(theme => ({\n  button: {\n    margin: theme.spacing(1)\n  }\n}));\n\nfunction PostImageUpload(props) {\n  const classes = useStyles();\n  const [postImages, setPostImages] = useState([]);\n  const [file, setFile] = useState({});\n  const [isPostImageCarousel, setIsPostImageCarousel] = useState(true);\n  const [fullopen, setFullOpen] = useState(false);\n  const [errorOpen, setErrorOpen] = useState(false);\n\n  const handlefullOpen = () => {\n    setIsPostImageCarousel(false);\n    setFullOpen(true);\n  };\n\n  const handlefullClose = () => {\n    setFullOpen(false);\n  };\n\n  function handleErrorClose() {\n    setErrorOpen(false);\n  }\n\n  function handleErrorOpen() {\n    setErrorOpen(true);\n  }\n\n  useEffect(() => {\n    fetchPostImages(props.post.id);\n  });\n  useEffect(() => {\n    fetchPostImagesAfterSubmit(props.post.id);\n  }, [postImages, props]);\n\n  async function fetchPostImages(id) {\n    let fixImages = await axiosWithAuth().get(`/post/${id}/post_images`);\n    setPostImages(fixImages.data); // return fixImages;\n  }\n\n  async function fetchPostImagesAfterSubmit(id) {\n    let fixImages = await axiosWithAuth().get(`/post/${id}/post_images`);\n    setPostImages(fixImages.data); // return fixImages;\n  }\n\n  function handleInputChanges(e) {\n    e.preventDefault();\n    const file = e.target.files[0];\n\n    if (!file) {\n      return;\n    }\n\n    if (file && file.size > 1e8) {\n      alert(\"File is too large. Maximum limit is 100MB.\");\n      e.target.value = '';\n    } else {\n      setFile(file);\n    }\n  } // console.log(props.post.id,\"psotsssss\")\n\n\n  function handleSubmitUploaderFixDocuments(e) {\n    e.preventDefault(); // Create file ref (Example: /documents/:car_id/:file_name)\n\n    const fileRef = imagesRef.child(`${props.post.id}/${file.name}`); // Upload file\n\n    fileRef.put(file).then(snapshot => {\n      // console.log('Upload success!', snapshot.constructor, snapshot);\n      axiosWithAuth().post(`/post/${props.post.id}/post_images`, {\n        file_name: file.name\n      }).then(res => {\n        fetchPostImagesAfterSubmit(props.post.id); // window.location.reload(); \n      }).catch(error => {\n        console.error(error);\n      });\n    }).catch(err => {\n      console.error(err);\n    });\n  }\n\n  if (props.isCarousel) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ImageCarousel, {\n      style: {\n        backgroundColor: \"red\",\n        maxWidth: \"100px\"\n      },\n      isImageDelShow: true,\n      postImages: postImages,\n      post: props.post,\n      fetchPostImage: fetchPostImages,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }\n    }));\n  } else if (props.isForm) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: \"200px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }\n    }, \"Add Image\"), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        display: 'flex',\n        flexDirection: \"column\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: handleSubmitUploaderFixDocuments,\n      style: {\n        display: 'flex',\n        flexDirection: \"column\",\n        maxWidth: \"200px\",\n        justifyContent: \"Center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      required: true,\n      id: \"uploader\",\n      type: \"file\",\n      accept: \"image/*,.pdf,.doc\",\n      onChange: handleInputChanges,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      name: \"car_type\",\n      color: \"default\",\n      className: classes.button,\n      startIcon: /*#__PURE__*/React.createElement(CloudUploadIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 44\n        }\n      }),\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 29\n      }\n    }, \"Upload\")))));\n  } else if (props.isCarouselForPost) {\n    if (postImages.length < 1) {\n      return null;\n    } else {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ImageCarousel, {\n        isPostImageCarousel: isPostImageCarousel,\n        postImages: postImages,\n        post: props.post,\n        fetchPostImage: fetchPostImages,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 25\n        }\n      }));\n    }\n  } else if (postImages.length < 1) {\n    return null;\n  } else {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n      style: {\n        color: \"darkcyan\",\n        outline: '0'\n      },\n      onClick: handlefullOpen,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 21\n      }\n    }, \"Expand Images\"), /*#__PURE__*/React.createElement(ImageCarousel, {\n      open: fullopen,\n      handleClose: handlefullClose,\n      onClose: handlefullClose,\n      postImages: postImages,\n      post: props.post,\n      fetchPostImage: fetchPostImages,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 21\n      }\n    }));\n  }\n}\n\nexport default PostImageUpload;","map":{"version":3,"sources":["/Users/roger/Projects/mechanic-frontend/client/src/components/PostImageUpload.js"],"names":["React","useEffect","useState","imagesRef","axiosWithAuth","Button","makeStyles","CloudUploadIcon","CarImgShow","CarImageFixShow","DriveEtaIcon","ImageCarousel","DescriptionIcon","useStyles","theme","button","margin","spacing","PostImageUpload","props","classes","postImages","setPostImages","file","setFile","isPostImageCarousel","setIsPostImageCarousel","fullopen","setFullOpen","errorOpen","setErrorOpen","handlefullOpen","handlefullClose","handleErrorClose","handleErrorOpen","fetchPostImages","post","id","fetchPostImagesAfterSubmit","fixImages","get","data","handleInputChanges","e","preventDefault","target","files","size","alert","value","handleSubmitUploaderFixDocuments","fileRef","child","name","put","then","snapshot","file_name","res","catch","error","console","err","isCarousel","backgroundColor","maxWidth","isForm","height","display","flexDirection","justifyContent","isCarouselForPost","length","color","outline"],"mappings":"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","sourcesContent":["\nimport React, { useEffect, useState } from 'react';\nimport { imagesRef } from '../helpers/firebase';\nimport axiosWithAuth from '../helpers/axiosWithAuth';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport CarImgShow from './CarImgShow';\nimport CarImageFixShow from './CarImageFixShow';\nimport DriveEtaIcon from '@material-ui/icons/DriveEta';\nimport ImageCarousel from './ImageCarousel';\nimport DescriptionIcon from '@material-ui/icons/Description';\n\n\nconst useStyles = makeStyles(theme => ({\n    button: {\n        margin: theme.spacing(1),\n    },\n}));\n\nfunction PostImageUpload(props) {\n\n\n    const classes = useStyles();\n    const [postImages, setPostImages] = useState([]);\n    const [file, setFile] = useState({});\n    const [isPostImageCarousel,setIsPostImageCarousel]=useState(true)\n\n    const [fullopen, setFullOpen] = useState(false);\n    const [errorOpen, setErrorOpen] = useState(false);\n\n\n    const handlefullOpen = () => {\n        setIsPostImageCarousel(false)\n        setFullOpen(true);\n    };\n    const handlefullClose = () => {\n        setFullOpen(false);\n    };\n\n    function handleErrorClose() {\n        setErrorOpen(false);\n    }\n\n    function handleErrorOpen() {\n        setErrorOpen(true);\n    }\n\n\n    useEffect(() => {\n\n        fetchPostImages(props.post.id);\n\n    }, );\n\n    useEffect(() => {\n\n      \n        fetchPostImagesAfterSubmit(props.post.id);\n        \n\n    }, [postImages,props]);\n\n\n    async function fetchPostImages(id) {\n        let fixImages = await axiosWithAuth().get(`/post/${id}/post_images`)\n        setPostImages(fixImages.data);\n        // return fixImages;\n    }\n\n    async function fetchPostImagesAfterSubmit(id) {\n        let fixImages = await axiosWithAuth().get(`/post/${id}/post_images`)\n        setPostImages(fixImages.data);\n        // return fixImages;\n    }\n\n    function handleInputChanges(e) {\n        e.preventDefault();\n        const file = e.target.files[0]\n        if (!file) {\n            return;\n        }\n        if (file && file.size > 1e8) {\n            alert(\"File is too large. Maximum limit is 100MB.\")\n            e.target.value = ''\n        } else {\n            setFile(file);\n        }\n    }\n\n// console.log(props.post.id,\"psotsssss\")\n\n function handleSubmitUploaderFixDocuments(e) {\n        e.preventDefault()\n        // Create file ref (Example: /documents/:car_id/:file_name)\n        const fileRef = imagesRef.child(`${props.post.id}/${file.name}`)\n        // Upload file\n         fileRef.put(file).then( (snapshot) => {\n            // console.log('Upload success!', snapshot.constructor, snapshot);\n             axiosWithAuth().post(`/post/${props.post.id}/post_images`, { file_name: file.name })\n                .then(res => {\n                    fetchPostImagesAfterSubmit(props.post.id);\n                    // window.location.reload(); \n                })\n                .catch(error => {\n                    console.error(error);\n                })\n        }).catch(err => {\n            console.error(err)\n        });\n    }\n\n\n\n  if(props.isCarousel){\n        return (\n<>\n\n        <ImageCarousel\n        style={{ backgroundColor: \"red\", maxWidth:\"100px\"}}\n            isImageDelShow= {true}\n            postImages={postImages}\n            post={props.post}\n            fetchPostImage={fetchPostImages}\n\n        />\n    \n</>\n        )\n    }\n    \n\n    else if(props.isForm){\n        return (\n            <>\n            <div style={{ height: \"200px\" }}>\n                <h4>Add Image</h4>\n                <div style={{ display: 'flex', flexDirection: \"column\" }}>\n                    <form onSubmit={handleSubmitUploaderFixDocuments} style={{ display: 'flex', flexDirection: \"column\",maxWidth:\"200px\",justifyContent:\"Center\"}}>\n                            <input required id=\"uploader\" type=\"file\" accept=\"image/*,.pdf,.doc\" onChange={handleInputChanges}></input>\n                            <Button\n                                variant=\"contained\"\n                                name=\"car_type\"\n                                color=\"default\"\n                                className={classes.button}\n                                startIcon={<CloudUploadIcon />}\n                                type=\"submit\"\n                            >\n                                Upload\n                </Button>\n                        </form>\n                    </div>\n                </div>\n           \n\n            </>\n        )\n    }else if (props.isCarouselForPost){\n        if(postImages.length <1){\n            return (\n                null\n            )\n        }else{\n            return (\n                <>\n               \n                        <ImageCarousel\n                        isPostImageCarousel={isPostImageCarousel}\n                        postImages={postImages}\n                        post={props.post}\n                        fetchPostImage={fetchPostImages}\n                \n                        />\n               \n                </>\n                        )\n        }\n       \n    }else if (postImages.length <1){\n    return (\n        null\n    )\n       \n    \n\n    }else\n    {\n        return (\n            <>\n                    <Button\n                        style={{ color: \"darkcyan\", outline: '0' }}\n                        onClick={handlefullOpen}\n                    >\n                    Expand Images\n                    </Button>\n               \n                    <ImageCarousel\n                   open={fullopen}\n                   handleClose={handlefullClose}\n                   onClose={handlefullClose}\n                    postImages={postImages}\n                    post={props.post}\n                    fetchPostImage={fetchPostImages}\n            \n                    />\n                \n            </>\n                    )\n\n    }\n\n\n\n}\n\n\n\nexport default PostImageUpload;\n"]},"metadata":{},"sourceType":"module"}