{"ast":null,"code":"import _slicedToArray from \"/Users/roger/Projects/mechanic-frontend/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/roger/Projects/mechanic-frontend/client/src/components/ProfileImageShow.js\";\nimport React, { useEffect, useState } from 'react';\nimport { imagesRef } from '../helpers/firebase';\nimport { Image } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { fetchProfileImage } from \"../store/actions/settingsActions\";\n\nfunction ProfileImageShow(props) {\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        thisImage = _useState2[0],\n        setThisimage = _useState2[1]; // const[image,setImage] = useState({})\n\n\n  const userId = localStorage.getItem('id');\n  useEffect(() => {\n    const checkerVar = null;\n\n    if (props.userImage && props.userImage.file_name) {\n      checkerVar = props.userImage.file_name;\n    }\n\n    props.fetchProfileImage(userId);\n    getImg();\n  }, []);\n\n  async function checker() {}\n\n  console.log(checkerVar);\n  const fileRef = imagesRef.child(\"\".concat(userId, \"/\").concat(checkerVar)); // console.log(props.userImage[0],\"whoel\")\n  // // const firsty = props.userImage[0]\n  // // console.log(firsty,\"file\")\n\n  function getImg() {\n    fileRef.getMetadata().then(metadata => {\n      fileRef.getDownloadURL().then(url => {\n        setThisimage(url); // let img = document.getElementById('document-image');\n        // if (metadata.contentType === 'application/pdf') {\n        //     img.src = '';\n        //     // TODO handle PDFs\n        //   } else {\n        //     img.src = url;\n        //   }\n      }).catch(err => {\n        console.error(err);\n      });\n    }).catch(err => {\n      console.error(err);\n    });\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(Image, {\n    src: \"holder.js/171x180\",\n    rounded: true,\n    id: \"reg-image\",\n    style: {\n      height: \"200px\"\n    },\n    src: \"\".concat(thisImage),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }));\n}\n\nconst mapStateToProps = state => ({\n  userImage: state.setting.userImage\n});\n\nexport default connect(mapStateToProps, {\n  fetchProfileImage\n})(ProfileImageShow);","map":{"version":3,"sources":["/Users/roger/Projects/mechanic-frontend/client/src/components/ProfileImageShow.js"],"names":["React","useEffect","useState","imagesRef","Image","connect","fetchProfileImage","ProfileImageShow","props","thisImage","setThisimage","userId","localStorage","getItem","checkerVar","userImage","file_name","getImg","checker","console","log","fileRef","child","getMetadata","then","metadata","getDownloadURL","url","catch","err","error","height","mapStateToProps","state","setting"],"mappings":";;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,KAAT,QAAsB,iBAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,iBAAT,QAAkC,kCAAlC;;AAIA,SAASC,gBAAT,CAA0BC,KAA1B,EAAiC;AAAA,oBAEGN,QAAQ,CAAC,EAAD,CAFX;AAAA;AAAA,QAEtBO,SAFsB;AAAA,QAEZC,YAFY,kBAG7B;;;AACA,QAAMC,MAAM,GAAGC,YAAY,CAACC,OAAb,CAAqB,IAArB,CAAf;AAEAZ,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMa,UAAU,GAAG,IAAnB;;AACA,QAAGN,KAAK,CAACO,SAAN,IAAmBP,KAAK,CAACO,SAAN,CAAgBC,SAAtC,EAAgD;AAC9CF,MAAAA,UAAU,GAAGN,KAAK,CAACO,SAAN,CAAgBC,SAA7B;AACH;;AACCR,IAAAA,KAAK,CAACF,iBAAN,CAAwBK,MAAxB;AACEM,IAAAA,MAAM;AACT,GAPQ,EAON,EAPM,CAAT;;AAUJ,iBAAeC,OAAf,GAAwB,CAErB;;AACDC,EAAAA,OAAO,CAACC,GAAR,CAAYN,UAAZ;AAEE,QAAMO,OAAO,GAAGlB,SAAS,CAACmB,KAAV,WAAmBX,MAAnB,cAA6BG,UAA7B,EAAhB,CArB6B,CAuB7B;AACA;AACA;;AAIA,WAASG,MAAT,GAAkB;AACdI,IAAAA,OAAO,CAACE,WAAR,GAAsBC,IAAtB,CAA4BC,QAAD,IAAc;AACvCJ,MAAAA,OAAO,CAACK,cAAR,GAAyBF,IAAzB,CAA8BG,GAAG,IAAI;AAEnCjB,QAAAA,YAAY,CAACiB,GAAD,CAAZ,CAFmC,CAInC;AACA;AACA;AACA;AACA;AACA;AACA;AACD,OAXD,EAYCC,KAZD,CAYOC,GAAG,IAAI;AACZV,QAAAA,OAAO,CAACW,KAAR,CAAcD,GAAd;AACD,OAdD;AAeD,KAhBD,EAgBGD,KAhBH,CAgBUC,GAAD,IAAS;AAChBV,MAAAA,OAAO,CAACW,KAAR,CAAcD,GAAd;AACD,KAlBD;AAmBH;;AAED,SACI,0CAEI,oBAAC,KAAD;AAAO,IAAA,GAAG,EAAC,mBAAX;AAA+B,IAAA,OAAO,MAAtC;AAAuC,IAAA,EAAE,EAAC,WAA1C;AAAuD,IAAA,KAAK,EAAE;AAACE,MAAAA,MAAM,EAAC;AAAR,KAA9D;AAAgF,IAAA,GAAG,YAAKtB,SAAL,CAAnF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ;AAQH;;AAKD,MAAMuB,eAAe,GAAGC,KAAK,KAAK;AAChClB,EAAAA,SAAS,EAAGkB,KAAK,CAACC,OAAN,CAAcnB;AADM,CAAL,CAA7B;;AAGA,eAAeV,OAAO,CACpB2B,eADoB,EAEpB;AAAC1B,EAAAA;AAAD,CAFoB,CAAP,CAGbC,gBAHa,CAAf","sourcesContent":["\n\nimport React, { useEffect, useState } from 'react';\nimport { imagesRef } from '../helpers/firebase';\nimport { Image } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { fetchProfileImage } from \"../store/actions/settingsActions\";\n\n\n\nfunction ProfileImageShow(props) {\n\n    const [thisImage,setThisimage]= useState('')\n    // const[image,setImage] = useState({})\n    const userId = localStorage.getItem('id');\n    \n    useEffect(() => {\n      const checkerVar = null\n      if(props.userImage && props.userImage.file_name){\n        checkerVar = props.userImage.file_name\n    }\n      props.fetchProfileImage(userId)\n        getImg()\n    }, []);\n\n\nasync function checker(){\n    \n  }\n  console.log(checkerVar)  \n\n    const fileRef = imagesRef.child(`${userId}/${checkerVar}`);\n\n    // console.log(props.userImage[0],\"whoel\")\n    // // const firsty = props.userImage[0]\n    // // console.log(firsty,\"file\")\n    \n   \n\n    function getImg() {\n        fileRef.getMetadata().then((metadata) => {\n          fileRef.getDownloadURL().then(url => {\n\n            setThisimage(url)\n\n            // let img = document.getElementById('document-image');\n            // if (metadata.contentType === 'application/pdf') {\n            //     img.src = '';\n            //     // TODO handle PDFs\n            //   } else {\n            //     img.src = url;\n            //   }\n          })\n          .catch(err => {\n            console.error(err);\n          })\n        }).catch((err) => {\n          console.error(err);\n        });\n    }\n\n    return(\n        <>\n            {/* {(metadata.contentType === 'application/pdf')? <div id=\"div-pdf\" src={`${thisImage}`}></div> :  <img id=\"reg-image\" height=\"200px\" src={`${thisImage}`}></img>} */}\n            <Image src=\"holder.js/171x180\" rounded id=\"reg-image\"  style={{height:\"200px\"}} src={`${thisImage}`}/>\n            {/* {props.image.file_name} */}\n\n        </>\n    )\n}\n\n\n\n\nconst mapStateToProps = state => ({\n  userImage : state.setting.userImage\n});\nexport default connect(\n  mapStateToProps,\n  {fetchProfileImage}\n)(ProfileImageShow);\n"]},"metadata":{},"sourceType":"module"}