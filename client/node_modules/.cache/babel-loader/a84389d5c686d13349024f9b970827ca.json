{"ast":null,"code":"var _jsxFileName = \"/Users/roger/Projects/mechanic-frontend/client/src/components/PostImageUpload.js\";\nimport React, { useEffect, useState } from 'react';\nimport { imagesRef } from '../helpers/firebase';\nimport axiosWithAuth from '../helpers/axiosWithAuth';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport CarImgShow from './CarImgShow';\nimport CarImageFixShow from './CarImageFixShow';\nimport DriveEtaIcon from '@material-ui/icons/DriveEta';\nimport ImageCarousel from './ImageCarousel';\nimport DescriptionIcon from '@material-ui/icons/Description';\nimport PostImageShow from './PostImageShow';\nconst useStyles = makeStyles(theme => ({\n  button: {\n    margin: theme.spacing(1)\n  }\n}));\n\nfunction PostImageUpload(props) {\n  const classes = useStyles();\n  const [postImages, setPostImages] = useState([]);\n  const [file, setFile] = useState({});\n  const [isPostImageCarousel, setIsPostImageCarousel] = useState(true);\n  const [fullopen, setFullOpen] = useState(false);\n  const [errorOpen, setErrorOpen] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handlefullOpen = () => {\n    setIsPostImageCarousel(false);\n    setFullOpen(true);\n  };\n\n  const handlefullClose = () => {\n    setFullOpen(false);\n  };\n\n  function handleErrorClose() {\n    setErrorOpen(false);\n  }\n\n  function handleErrorOpen() {\n    setErrorOpen(true);\n  }\n\n  useEffect(() => {\n    fetchPostImages(props.post.id);\n  }, [file]); // useEffect(() => {\n  //         fetchPostImagesAfterSubmit(props.post.id);\n  // }, []);\n\n  async function fetchPostImages(id) {\n    let fixImages = await axiosWithAuth().get(`/post/${id}/post_images`);\n    setPostImages(fixImages.data);\n  }\n\n  async function fetchPostImagesAfterSubmit(id) {\n    axiosWithAuth().get(`/post/${id}/post_images`).then(res => {\n      console.log(res.data, \"this is the data\");\n      setPostImages(res.data);\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  function handleInputChanges(e) {\n    e.preventDefault();\n    const file = e.target.files[0];\n\n    if (!file) {\n      return;\n    }\n\n    if (file && file.size > 1e8) {\n      alert(\"File is too large. Maximum limit is 100MB.\");\n      e.target.value = '';\n    } else {\n      setFile(file);\n    }\n  } // console.log(props.post.id,\"psotsssss\")\n\n\n  function handleSubmitUploaderFixDocuments(e) {\n    e.preventDefault(); // Create file ref (Example: /documents/:car_id/:file_name)\n\n    const fileRef = imagesRef.child(`${props.post.id}/${file.name}`); // Upload file\n\n    fileRef.put(file).then(snapshot => {\n      // console.log('Upload success!', snapshot.constructor, snapshot);\n      axiosWithAuth().post(`/post/${props.post.id}/post_images`, {\n        file_name: file.name\n      }).then(res => {\n        fetchPostImagesAfterSubmit(props.post.id);\n      }).catch(error => {\n        console.error(error);\n      });\n    }).catch(err => {\n      console.error(err);\n    });\n  }\n\n  if (props.isCarousel) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ImageCarousel, {\n      style: {\n        backgroundColor: \"red\",\n        maxWidth: \"100px\"\n      },\n      isImageDelShow: true,\n      postImages: postImages,\n      post: props.post,\n      fetchPostImages: fetchPostImages,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: \"200px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 18\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 21\n      }\n    }, \"Add Image\"), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        display: 'flex',\n        flexDirection: \"column\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: handleSubmitUploaderFixDocuments,\n      style: {\n        display: 'flex',\n        flexDirection: \"column\",\n        maxWidth: \"200px\",\n        justifyContent: \"Center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 25\n      }\n    }, isLoading ? /*#__PURE__*/React.createElement(\"div\", {\n      class: \"spinner-border\",\n      role: \"status\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 26\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      class: \"sr-only\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 26\n      }\n    }, \"Loading...\")) : null, /*#__PURE__*/React.createElement(\"input\", {\n      required: true,\n      id: \"uploader\",\n      type: \"file\",\n      accept: \"image/*,.pdf,.doc\",\n      onChange: handleInputChanges,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      name: \"car_type\",\n      color: \"default\",\n      className: classes.button,\n      startIcon: /*#__PURE__*/React.createElement(CloudUploadIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 44\n        }\n      }),\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 29\n      }\n    }, \"Upload\")))));\n  } else if (props.isCarouselForPost) {\n    if (postImages.length < 1) {\n      return null;\n    } else {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ImageCarousel, {\n        isPostImageCarousel: isPostImageCarousel,\n        postImages: postImages,\n        post: props.post,\n        fetchPostImage: fetchPostImages,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 21\n        }\n      }));\n    }\n  } else if (postImages.length < 1) {\n    return null;\n  } else {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n      style: {\n        color: \"darkcyan\",\n        outline: '0'\n      },\n      onClick: handlefullOpen,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 17\n      }\n    }, \"Expand Images\"), /*#__PURE__*/React.createElement(ImageCarousel, {\n      open: fullopen,\n      handleClose: handlefullClose,\n      onClose: handlefullClose,\n      postImages: postImages,\n      post: props.post,\n      fetchPostImage: fetchPostImages,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 17\n      }\n    }));\n  }\n}\n\nexport default PostImageUpload;","map":{"version":3,"sources":["/Users/roger/Projects/mechanic-frontend/client/src/components/PostImageUpload.js"],"names":["React","useEffect","useState","imagesRef","axiosWithAuth","Button","makeStyles","CloudUploadIcon","CarImgShow","CarImageFixShow","DriveEtaIcon","ImageCarousel","DescriptionIcon","PostImageShow","useStyles","theme","button","margin","spacing","PostImageUpload","props","classes","postImages","setPostImages","file","setFile","isPostImageCarousel","setIsPostImageCarousel","fullopen","setFullOpen","errorOpen","setErrorOpen","isLoading","setIsLoading","handlefullOpen","handlefullClose","handleErrorClose","handleErrorOpen","fetchPostImages","post","id","fixImages","get","data","fetchPostImagesAfterSubmit","then","res","console","log","catch","err","handleInputChanges","e","preventDefault","target","files","size","alert","value","handleSubmitUploaderFixDocuments","fileRef","child","name","put","snapshot","file_name","error","isCarousel","backgroundColor","maxWidth","height","display","flexDirection","justifyContent","isCarouselForPost","length","color","outline"],"mappings":"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","sourcesContent":["\nimport React, { useEffect, useState } from 'react';\nimport { imagesRef } from '../helpers/firebase';\nimport axiosWithAuth from '../helpers/axiosWithAuth';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport CarImgShow from './CarImgShow';\nimport CarImageFixShow from './CarImageFixShow';\nimport DriveEtaIcon from '@material-ui/icons/DriveEta';\nimport ImageCarousel from './ImageCarousel';\nimport DescriptionIcon from '@material-ui/icons/Description';\nimport PostImageShow from './PostImageShow';\n\n\nconst useStyles = makeStyles(theme => ({\n    button: {\n        margin: theme.spacing(1),\n    },\n}));\n\nfunction PostImageUpload(props) {\n     \n    \n\n    const classes = useStyles();\n    const [postImages, setPostImages] = useState([]);\n    const [file, setFile] = useState({});\n    const [isPostImageCarousel, setIsPostImageCarousel] = useState(true)\n\n    const [fullopen, setFullOpen] = useState(false);\n    const [errorOpen, setErrorOpen] = useState(false);\n    const [isLoading,setIsLoading] = useState(false)\n\n\n    const handlefullOpen = () => {\n        setIsPostImageCarousel(false)\n        setFullOpen(true);\n    };\n    const handlefullClose = () => {\n        setFullOpen(false);\n    };\n\n    function handleErrorClose() {\n        setErrorOpen(false);\n    }\n\n    function handleErrorOpen() {\n        setErrorOpen(true);\n    }\n\n\n    useEffect(() => {\n\n        fetchPostImages(props.post.id);\n\n    }, [file]);\n\n    // useEffect(() => {\n    \n    //         fetchPostImagesAfterSubmit(props.post.id);\n    \n    // }, []);\n\n\n\n\n    async function fetchPostImages(id) {\n        let fixImages = await axiosWithAuth().get(`/post/${id}/post_images`)\n        setPostImages(fixImages.data);\n    }\n\n\n    async function fetchPostImagesAfterSubmit(id) {\n        axiosWithAuth().get(`/post/${id}/post_images`)\n        .then(res =>{\n            console.log(res.data,\"this is the data\")\n            setPostImages(res.data);\n        })\n        .catch(err=>{\n            console.log(err)\n        })\n        \n    }\n\n    function handleInputChanges(e) {\n        e.preventDefault();\n        const file = e.target.files[0]\n        if (!file) {\n            return;\n        }\n        if (file && file.size > 1e8) {\n            alert(\"File is too large. Maximum limit is 100MB.\")\n            e.target.value = ''\n        } else {\n            setFile(file);\n        }\n    }\n\n    // console.log(props.post.id,\"psotsssss\")\n\n    function handleSubmitUploaderFixDocuments(e) {\n        \n        e.preventDefault()\n        // Create file ref (Example: /documents/:car_id/:file_name)\n        const fileRef = imagesRef.child(`${props.post.id}/${file.name}`)\n        // Upload file\n        fileRef.put(file).then((snapshot) => {\n            // console.log('Upload success!', snapshot.constructor, snapshot);\n            axiosWithAuth().post(`/post/${props.post.id}/post_images`, { file_name: file.name })\n                .then(res => {\n\n                     fetchPostImagesAfterSubmit(props.post.id);\n                    \n                     \n                })\n                .catch(error => {\n                    console.error(error);\n                })\n        }).catch(err => {\n            console.error(err)\n        });\n    }\n\n\n\n    if (props.isCarousel) {\n        return (\n            <>\n\n                <ImageCarousel\n                    style={{ backgroundColor: \"red\", maxWidth: \"100px\" }}\n                    isImageDelShow={true}\n                    postImages={postImages}\n                    post={props.post}\n                    fetchPostImages={fetchPostImages}\n\n                />\n                 <div style={{ height: \"200px\" }}>\n                    <h4>Add Image</h4>\n                    <div style={{ display: 'flex', flexDirection: \"column\" }}>\n                        <form onSubmit={handleSubmitUploaderFixDocuments} style={{ display: 'flex', flexDirection: \"column\", maxWidth: \"200px\", justifyContent: \"Center\" }}>\n                            \n                        {isLoading ? \n                         <div class=\"spinner-border\" role=\"status\">\n                         <span class=\"sr-only\">Loading...</span>\n                         </div>\n                            :null}\n                            <input required id=\"uploader\" type=\"file\" accept=\"image/*,.pdf,.doc\" onChange={handleInputChanges}></input>\n                            <Button\n                                variant=\"contained\"\n                                name=\"car_type\"\n                                color=\"default\"\n                                className={classes.button}\n                                startIcon={<CloudUploadIcon />}\n                                type=\"submit\"\n                            >\n                                Upload\n                </Button>\n                        </form>\n                    </div>\n                </div>\n\n            </>\n        )\n\n    } \n    else if (props.isCarouselForPost) {\n        if (postImages.length < 1) {\n            return (\n                null\n            )\n        } else {\n            return (\n                <>\n\n                    <ImageCarousel\n                        isPostImageCarousel={isPostImageCarousel}\n                        postImages={postImages}\n                        post={props.post}\n                        fetchPostImage={fetchPostImages}\n\n                    />\n\n                </>\n            )\n        }\n\n    } \n    else if (postImages.length < 1) {\n        return (\n            null\n        )\n\n    } else {\n        return (\n            <>\n                <Button\n                    style={{ color: \"darkcyan\", outline: '0' }}\n                    onClick={handlefullOpen}\n                >\n                    Expand Images\n                    </Button>\n\n                <ImageCarousel\n                    open={fullopen}\n                    handleClose={handlefullClose}\n                    onClose={handlefullClose}\n                    postImages={postImages}\n                    post={props.post}\n                    fetchPostImage={fetchPostImages}\n\n                />\n\n            </>\n        )\n\n    }\n\n\n\n}\n\n\n\nexport default PostImageUpload;\n"]},"metadata":{},"sourceType":"module"}